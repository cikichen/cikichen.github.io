<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>程序员 - Category - 编程心语</title>
        <link>https://www.ithome.me/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/</link>
        <description>程序员 - Category - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Thu, 05 Dec 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/" rel="self" type="application/rss+xml" /><item>
    <title>Java常见面试题</title>
    <link>https://www.ithome.me/post/2019/12/05/java%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <pubDate>Thu, 05 Dec 2019 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2019/12/05/java%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
    <description><![CDATA[<blockquote>
<p>作者：SnailClimb
链接：https://juejin.im/post/5dba72c96fb9a02047526331
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="1-面向对象和面向过程的区别">1. 面向对象和面向过程的区别</h2>
<ul>
<li><strong>面向过程</strong> ：<strong>面向过程性能比面向对象高。</strong> 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></li>
<li><strong>面向对象</strong> ：<strong>面向对象易维护、易复用、易扩展。</strong> 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低</strong>。</li>
</ul>
<p>参见 issue :  <a href="https://github.com/Snailclimb/JavaGuide/issues/431" target="_blank" rel="noopener noreffer">面向过程 ：面向过程性能比面向对象高？？</a>
</p>
<blockquote>
<p>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。</p>
<p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</p>
</blockquote>
<h2 id="2-java-语言有哪些特点">2. Java 语言有哪些特点?</h2>
<ol>
<li>简单易学；</li>
<li>面向对象（封装，继承，多态）；</li>
<li>平台无关性（ Java 虚拟机实现平台无关性）；</li>
<li>可靠性；</li>
<li>安全性；</li>
<li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li>
<li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li>
<li>编译与解释并存；</li>
</ol>
<blockquote>
<p>修正（参见： <a href="https://github.com/Snailclimb/JavaGuide/issues/544" target="_blank" rel="noopener noreffer">issue#544</a>
）：C++11开始（2011年的时候）,C++就引入了多线程库，在windows、linux、macos都可以使用<code>std::thread</code>和<code>std::async</code>来创建线程。参考链接：http://www.cplusplus.com/reference/thread/thread/?kw=thread</p>
</blockquote>
<h2 id="3-关于-jvm-jdk-和-jre-最详细通俗的解答">3. 关于 JVM JDK 和 JRE 最详细通俗的解答</h2>
<h3 id="jvm">JVM</h3>
<p>Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p>
<p><strong>什么是字节码?采用字节码的好处是什么?</strong></p>
<blockquote>
<p>在 Java 中，JVM可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。</p>
</blockquote>
<p><strong>Java 程序从源代码到运行一般有下面3步：</strong></p>
<p></p>]]></description>
</item>
<item>
    <title>微软正式发布 Windows Terminal 预览版</title>
    <link>https://www.ithome.me/post/2019/07/19/%E5%BE%AE%E8%BD%AF%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83-windows-terminal-%E9%A2%84%E8%A7%88%E7%89%88/</link>
    <pubDate>Fri, 19 Jul 2019 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2019/07/19/%E5%BE%AE%E8%BD%AF%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83-windows-terminal-%E9%A2%84%E8%A7%88%E7%89%88/</guid>
    <description><![CDATA[<p>程序员们都知道windows自带的命令行工具是多么的反人类+难用，这么多年过去了，微软终于意识到了这个问题。发布了一个强大的命令行工具，那就是<code>Windows Terminal</code>.</p>
<blockquote>
<p>github地址: <a href="https://github.com/microsoft/terminal" target="_blank" rel="noopener noreffer">https://github.com/microsoft/terminal</a>
</p>
</blockquote>
<blockquote>
<p>软件商店地址: <a href="https://www.microsoft.com/zh-cn/p/windows-terminal-preview/9n0dx20hk701" target="_blank" rel="noopener noreffer">https://www.microsoft.com/zh-cn/p/windows-terminal-preview/9n0dx20hk701</a>
</p>
</blockquote>
<p>


</p>]]></description>
</item>
</channel>
</rss>
