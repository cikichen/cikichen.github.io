<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Android - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/android/</link>
        <description>Android - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Mon, 02 Nov 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/android/" rel="self" type="application/rss+xml" /><item>
    <title>在Android中使用DataBinding(Kotlin)</title>
    <link>https://www.ithome.me/post/2020/11/02/%E5%9C%A8android%E4%B8%AD%E4%BD%BF%E7%94%A8data-binding/</link>
    <pubDate>Mon, 02 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/11/02/%E5%9C%A8android%E4%B8%AD%E4%BD%BF%E7%94%A8data-binding/</guid>
    <description><![CDATA[<blockquote>
<p>本文主要介绍<code>DataBinding</code>在<code>Android App</code>中的使用方法。<em>数据绑定是将“提供器”的数据源与“消费者”绑定并使其同步的一种通用技术。</em></p>
</blockquote>
<h2 id="1-android应用程序使用数据绑定">1. Android应用程序使用数据绑定</h2>
<h3 id="11-介绍databinding">1.1 介绍<code>DataBinding</code></h3>
<p><code>Android</code>通过<code>DataBinding</code>提供了编写声明型布局的支持。这样可以最大程度简化<em>布局</em>和<em>逻辑</em>相关联的代码。</p>
<p>数据绑定要求修改文件，外层需要包裹一个<code>layout</code>布局。主要通过<code>@{}</code> 或 <code>@={}</code>语法把布局中的元素和表达式的引用写入到属性中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;layout</span> <span class="na">xmlns:android=</span><span class="s">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:app=</span><span class="s">&#34;http://schemas.android.com/apk/res-auto&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:tools=</span><span class="s">&#34;http://schemas.android.com/tools&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;data&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;variable</span>
</span></span><span class="line"><span class="cl">            <span class="na">name=</span><span class="s">&#34;mainModel&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">type=</span><span class="s">&#34;me.ithome.jetpack.model.MainViewModel&#34;</span> <span class="nt">/&gt;</span>①
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/data&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;androidx.constraintlayout.widget.ConstraintLayout</span>
</span></span><span class="line"><span class="cl">        <span class="na">android:layout_width=</span><span class="s">&#34;match_parent&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">android:layout_height=</span><span class="s">&#34;match_parent&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">tools:context=</span><span class="s">&#34;.MainActivity&#34;</span><span class="nt">&gt;</span>②
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;TextView</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:id=</span><span class="s">&#34;@+id/tv_userinfo&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:layout_width=</span><span class="s">&#34;wrap_content&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:layout_height=</span><span class="s">&#34;wrap_content&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:text=</span><span class="s">&#34;@{mainModel.userData.toString()}&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:layout_constraintBottom_toBottomOf=</span><span class="s">&#34;parent&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:layout_constraintLeft_toLeftOf=</span><span class="s">&#34;parent&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:layout_constraintRight_toRightOf=</span><span class="s">&#34;parent&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:layout_constraintTop_toTopOf=</span><span class="s">&#34;parent&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Button</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:id=</span><span class="s">&#34;@+id/button&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:layout_width=</span><span class="s">&#34;wrap_content&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:layout_height=</span><span class="s">&#34;wrap_content&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:layout_marginTop=</span><span class="s">&#34;56dp&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:onClick=</span><span class="s">&#34;@{(view) -&gt; mainModel.getClick(view)}&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:text=</span><span class="s">&#34;@string/btn_getUserInfo&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:layout_constraintBottom_toTopOf=</span><span class="s">&#34;@+id/tv_userinfo&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:layout_constraintEnd_toEndOf=</span><span class="s">&#34;parent&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:layout_constraintHorizontal_bias=</span><span class="s">&#34;0.498&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:layout_constraintStart_toStartOf=</span><span class="s">&#34;parent&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:layout_constraintTop_toTopOf=</span><span class="s">&#34;parent&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/layout&gt;</span>
</span></span></code></pr]]></description>
</item>
<item>
    <title>Android内存泄漏分析</title>
    <link>https://www.ithome.me/post/2020/10/21/android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</link>
    <pubDate>Wed, 21 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/10/21/android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[<h2 id="概述">概述</h2>
<p>Android内存泄漏，也就是我们常说的<code>OOM(out of memory)</code>，<code>OOM</code>的后果大家都知道，严重影响APP的体验，轻则卡顿，重则闪退。而且内存泄漏在低端机上一般都会伴随着<code>ANR</code>，所以一定要重视它。</p>
<p>造成内存泄漏的常见因素有：</p>
<ul>
<li>IO操作</li>
<li>Bitmap</li>
<li>Context
<ul>
<li>单例持有引用</li>
</ul>
</li>
<li>Service
<ul>
<li>BroadcastReceiver</li>
<li>ContentObserver</li>
</ul>
</li>
<li>Handler</li>
<li>Thread</li>
</ul>
<h2 id="分析方法">分析方法</h2>
<p>分析内存泄漏的常用方法：</p>
<ul>
<li>StrictMode， 在<code>Application</code>的<code>onCreate</code>中添加<code>StrictMode</code>代码块</li>
<li>Leakcanary，引用<code>Leakcanary</code>库(<strong>常规手段，仅供参与，不应完全依赖这个库</strong>)</li>
<li>monkey，模拟用户点击操作，检查是否出现泄漏(<strong>推荐</strong>，最有效的方法)</li>
<li>adb命令手动触发<code>adb shell dumpsys meminfo packagename -d</code></li>
<li>Android Studio Memory Profiler，<code>Android Studio</code>自带的分析工具，已经非常好用了</li>
<li>MAT，终极神器，内存分析绕不开的话题(<code>Android Studio</code>搞不定就靠它了)</li>
</ul>
<h2 id="解决方案">解决方案</h2>
<ol>
<li>
<p>Context
如果大家收集过内存泄漏的崩溃日志，会发现大量错误都是由<code>Context</code>和<code>Handler</code>造成。
因为我们开发中会大量用到<code>Context</code>引用，而<code>Context</code>在<code>Application</code>，<code>Activity</code>，<code>Service</code>之类的地方会有自己的实例，而<code>Activity</code>和<code>Service</code>会因为生命周期的原因导致<code>Context</code>实例被回收，如果你继续使用其引用就会因为弱引用问题导致错误出现。
<code>Context</code>的引用也常见于单例模式。
所以建议大家尽可能使用<code>Application</code>的<code>Context</code>。</p>
</li>
<li>
<p>Bitmap
Bitmap的问题一般是因为没有对使用的图片及时释放所致。
图片一般因为体积问题，会导致占用比较多的内存
解决方案：就是在<code>Activity</code>的<code>onDestroy()</code>中及时回收内存。</p>
</li>
<li>
<p>IO操作
FileOutputStream()未关闭，IO流忘记关闭
解决方案：及时关闭IO流，避免泄露</p>]]></description>
</item>
<item>
    <title>Android高频面试题汇总(一)</title>
    <link>https://www.ithome.me/post/2020/10/21/android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B8%80/</link>
    <pubDate>Wed, 21 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/10/21/android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B8%80/</guid>
    <description><![CDATA[<h3 id="1leakcanary原理">1.Leakcanary原理？</h3>
<ol>
<li>利用 application.registerActivityLifecycleCallbacks(lifecycleCallbacks) 来监听整个生命周期内的 Activity onDestoryed 事件</li>
<li>某个 Activity 被 destory 后，将它传给 RefWatcher 去做观测，确保其后续会被正常回收；</li>
<li>RefWatcher 首先把 Activity 使用 KeyedWeakReference 引用起来，并使用一个 ReferenceQueue 来记录该 KeyedWeakReference 指向的对象是否已被回收；</li>
<li>AndroidWatchExecutor 会在 5s 后，开始检查这个弱引用内的 Activity 是否被正常回收。判断条件是：若 Activity 被正常回收，那么引用它的 KeyedWeakReference 会被自动放入 ReferenceQueue 中。</li>
<li>判断方式是：先看 Activity 对应的 KeyedWeakReference 是否已经放入 ReferenceQueue 中；如果没有，则手动 GC：gcTrigger.runGc();；然后再一次判断 ReferenceQueue 是否已经含有对应的 KeyedWeakReference。若还未被回收，则认为可能发生内存泄漏</li>
</ol>
<h3 id="2如何理解java的多态其中重载和重写有什么区别">2.如何理解Java的多态？其中，重载和重写有什么区别？</h3>
<p>多态是同一个行为具有多个不同表现形式或形态的能力，多态是同一个接口，使用不同的实例而执行不同操作，多态就是程序运行期间才确定，一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法。
多态存在的三个必要条件是：继承，重写，父类引用指向子类引用。
多态的三个实现方式是：重写，接口，抽象类和抽象方法。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">区别点</th>
          <th style="text-align: left">重载</th>
          <th style="text-align: left">重写</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">参数列表</td>
          <td style="text-align: left">必须修改</td>
          <td style="text-align: left">不能修改</td>
      </tr>
      <tr>
          <td style="text-align: left">返回类型</td>
          <td style="text-align: left">可以修改</td>
          <td style="text-align: left">不能修改</td>
      </tr>
      <tr>
          <td style="text-align: left">异常</td>
          <td style="text-align: left">可以修改</td>
          <td style="text-align: left">可以减少或删除，一定不能抛出新的或者更广的异常</td>
      </tr>
      <tr>
          <td style="text-align: left">访问</td>
          <td style="text-align: left">可以修改</td>
          <td style="text-align: left">一定不能做更严格的限制（可以降低限制）</td>
      </tr>
  </tbody>
</table>
<h3 id="3谈一下jvm内存区域划分哪部分是线程公有的哪部分是私有的">3.谈一下JVM内存区域划分？哪部分是线程公有的，哪部分是私有的？</h3>
<p></p>]]></description>
</item>
<item>
    <title>Android开发Jcenter替换为国内镜像</title>
    <link>https://www.ithome.me/post/2018/12/25/android%E5%BC%80%E5%8F%91jcenter%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</link>
    <pubDate>Tue, 25 Dec 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/12/25/android%E5%BC%80%E5%8F%91jcenter%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</guid>
    <description><![CDATA[<p>众所周知，在开发中我们需要从maven中央仓库下载依赖库，但是因为某种原因，导致这些仓库无法访问，幸运的是国内很多大公司都搭建的镜像库供我们使用，比如阿里的maven镜像。android现在都是通过gradle要管理依赖库，你发现直接添加<code>maven{url: url}</code>的方式是无效的。这里提供下一个有效的方案。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">allprojects{
</span></span><span class="line"><span class="cl">    repositories {
</span></span><span class="line"><span class="cl">        def REPOSITORY_URL = &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;
</span></span><span class="line"><span class="cl">        all { ArtifactRepository repo -&gt;
</span></span><span class="line"><span class="cl">            if(repo instanceof MavenArtifactRepository){
</span></span><span class="line"><span class="cl">                def url = repo.url.toString()
</span></span><span class="line"><span class="cl">                if (url.startsWith(&#39;https://repo1.maven.org/maven2&#39;) || url.startsWith(&#39;https://jcenter.bintray.com/&#39;)) {
</span></span><span class="line"><span class="cl">                    project.logger.lifecycle &#34;Repository ${repo.url} replaced by $REPOSITORY_URL.&#34;
</span></span><span class="line"><span class="cl">                    remove repo
</span></span><span class="line"><span class="cl">                }
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        maven {
</span></span><span class="line"><span class="cl">            url REPOSITORY_URL
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pr]]></description>
</item>
<item>
    <title>五年内将取代安卓？来聊聊谷歌新系统Fuchsia</title>
    <link>https://www.ithome.me/post/2018/07/20/%E4%BA%94%E5%B9%B4%E5%86%85%E5%B0%86%E5%8F%96%E4%BB%A3%E5%AE%89%E5%8D%93%E6%9D%A5%E8%81%8A%E8%81%8A%E8%B0%B7%E6%AD%8C%E6%96%B0%E7%B3%BB%E7%BB%9Ffuchsia/</link>
    <pubDate>Fri, 20 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/20/%E4%BA%94%E5%B9%B4%E5%86%85%E5%B0%86%E5%8F%96%E4%BB%A3%E5%AE%89%E5%8D%93%E6%9D%A5%E8%81%8A%E8%81%8A%E8%B0%B7%E6%AD%8C%E6%96%B0%E7%B3%BB%E7%BB%9Ffuchsia/</guid>
    <description><![CDATA[<p>（原标题：Project ‘Fuchsia’: Google Is Quietly Working on a Successor to Android）</p>
<p></p>]]></description>
</item>
<item>
    <title>flutter开发系列之二--第一个应用</title>
    <link>https://www.ithome.me/post/2018/07/18/flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</link>
    <pubDate>Wed, 18 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/18/flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</guid>
    <description><![CDATA[<p>好了，我们已经配置好环境变量。现在开始我们的第一个Flutter应用。</p>
<p>Flutter项目可以通过命令行创建，也可以用IDE创建。</p>
<h3 id="1-命令行方式创建flutter项目">1. 命令行方式创建Flutter项目</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter create myapp
</span></span><span class="line"><span class="cl">cd myapp
</span></span></code></pre></div><p>也可以指定pkg/bundleid</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter create --org com.example --template=app myapp
</span></span><span class="line"><span class="cl">cd myapp
</span></span></code></pre></div><p>然后，如果当前有模拟器运行，直接<code>flutter run</code>，否者安装下面的命令运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter emulators //列出可用的模拟器
</span></span><span class="line"><span class="cl">flutter emulators --launch &lt;emulator id&gt; //启动模拟器 emulator id=&gt;apple_ios_simulator
</span></span></code></pre></div><p>命令行方式就介绍这些了，有兴趣的请自行参考https://flutter.io/developing-packages/</p>
<h3 id="2-android-studio">2. Android Studio</h3>
<p>好了，重点来了，这也是我所推荐的方式，通过AS来开发一个Flutter应用。</p>]]></description>
</item>
<item>
    <title>flutter开发系列之一--环境配置</title>
    <link>https://www.ithome.me/post/2018/07/16/flutter%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Mon, 16 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/16/flutter%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[<p>flutter出来已经一段时间，相信有不少开发同学都去尝试了，现在跨平台开发技术火爆移动开发圈，比如RN，Weex等等，但是这些方案如果不是有特殊需求，一般并没有动力去学，flutter不同，google大厂出品，值得信赖。这系列文章主要是用来记录自己学习flutter的一些经验和遇到的问题。</p>
<h3 id="1-准备">1. 准备</h3>
<blockquote>
<p>因我使用的开发环境是Mac系统，因此本系列所有的配置都是Mac为主
由于网络问题，部分用户可能无法打开flutter官网，这里推荐<a href="https://flutter-io.cn/" target="_blank" rel="noopener noreffer">Flutter中文站</a>
</p>
</blockquote>
<p><strong>在开始flutter之前，请先安装好Xcode和Android Studio</strong></p>
<h3 id="2-安装xcode和android-studio">2. 安装Xcode和Android Studio</h3>
<h4 id="21-xcode">2.1 Xcode</h4>
<blockquote>
<p>直接在Mac App Store下载安装Xcode。</p>
</blockquote>
<p>安装完Xcode后还需要安装一些依赖库。而这些库需要通过brew安装。</p>
<ol>
<li>首先安装brew(已经安装过的跳过此步骤)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;
</span></span></code></pre></div><ol start="2">
<li>安装一些依赖库</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">brew update
</span></span><span class="line"><span class="cl">brew install --HEAD libimobiledevice
</span></span><span class="line"><span class="cl">brew install ideviceinstaller ios-deploy cocoapods
</span></span><span class="line"><span class="cl">pod setup
</span></span></code></pr]]></description>
</item>
<item>
    <title>Android热更新技术总结</title>
    <link>https://www.ithome.me/post/2017/10/26/android%E7%83%AD%E6%9B%B4%E6%96%B0%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</link>
    <pubDate>Thu, 26 Oct 2017 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2017/10/26/android%E7%83%AD%E6%9B%B4%E6%96%B0%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[<p>当前市面的热补丁方案有很多，其中比较出名的有阿里的HotFix、美团的Robust、微信的Tinker以及QZone的超级补丁方案。</p>
<h2 id="1热修复技术的优势">1、热修复技术的优势？</h2>
<ul>
<li>无需重新发版，实时高效热修复</li>
<li>用户无感知修复，无需下载新的应用，代价小</li>
<li>远程调试</li>
</ul>
<table>
  <thead>
      <tr>
          <th style="text-align: left">平台</th>
          <th style="text-align: left">阿里百川HotFix(Sophix)</th>
          <th style="text-align: left">AndFix</th>
          <th style="text-align: left">Tinker</th>
          <th style="text-align: left">Qzone</th>
          <th style="text-align: left">Robust</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">即时生效</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">no</td>
          <td style="text-align: left">no</td>
          <td style="text-align: left">yes</td>
      </tr>
      <tr>
          <td style="text-align: left">性能损耗</td>
          <td style="text-align: left">较小</td>
          <td style="text-align: left">较小</td>
          <td style="text-align: left">较大</td>
          <td style="text-align: left">较大</td>
          <td style="text-align: left">较小</td>
      </tr>
      <tr>
          <td style="text-align: left">侵入式打包</td>
          <td style="text-align: left">无侵入式打包</td>
          <td style="text-align: left">无侵入式打包</td>
          <td style="text-align: left">依赖侵入式打包</td>
          <td style="text-align: left">依赖侵入式打包</td>
          <td style="text-align: left">依赖侵入式打包</td>
      </tr>
      <tr>
          <td style="text-align: left">Rom体积</td>
          <td style="text-align: left">较小</td>
          <td style="text-align: left">较小</td>
          <td style="text-align: left">较大</td>
          <td style="text-align: left">较小</td>
          <td style="text-align: left">较小</td>
      </tr>
      <tr>
          <td style="text-align: left">接入复杂度</td>
          <td style="text-align: left">傻瓜式接入</td>
          <td style="text-align: left">比较简单</td>
          <td style="text-align: left">复杂</td>
          <td style="text-align: left">比较简单</td>
          <td style="text-align: left">复杂</td>
      </tr>
      <tr>
          <td style="text-align: left">补丁包大小</td>
          <td style="text-align: left">较小</td>
          <td style="text-align: left">较小</td>
          <td style="text-align: left">较小</td>
          <td style="text-align: left">较大</td>
          <td style="text-align: left">一般</td>
      </tr>
      <tr>
          <td style="text-align: left">全平台支持</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">yes</td>
      </tr>
      <tr>
          <td style="text-align: left">类替换</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">no</td>
      </tr>
      <tr>
          <td style="text-align: left">so替换</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">no</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">no</td>
          <td style="text-align: left">no</td>
      </tr>
      <tr>
          <td style="text-align: left">资源替换</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">no</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">yes</td>
          <td style="text-align: left">no</td>
      </tr>
      <tr>
          <td style="text-align: left">成功率</td>
          <td style="text-align: left">?</td>
          <td style="text-align: left">一般</td>
          <td style="text-align: left">较高（95.6%）</td>
          <td style="text-align: left">较高</td>
          <td style="text-align: left">最高（99.9%）</td>
      </tr>
  </tbody>
</table>
<p>可以看到阿里的Sophix有很大优势，阿里系在热修复领域有很多积累，我们可以看下阿里系的热修复技术发展路径，一张表格来说明一下各个版本热修复的差别：</p>]]></description>
</item>
<item>
    <title>Android流行架构分享与解析</title>
    <link>https://www.ithome.me/post/2016/07/22/android%E6%B5%81%E8%A1%8C%E6%9E%B6%E6%9E%84%E5%88%86%E4%BA%AB%E4%B8%8E%E8%A7%A3%E6%9E%90/</link>
    <pubDate>Fri, 22 Jul 2016 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2016/07/22/android%E6%B5%81%E8%A1%8C%E6%9E%B6%E6%9E%84%E5%88%86%E4%BA%AB%E4%B8%8E%E8%A7%A3%E6%9E%90/</guid>
    <description><![CDATA[<h2 id="如何构建一个优秀的app">如何构建一个优秀的App</h2>
<h4 id="android简介">Android简介</h4>
<ul>
<li>2008年9月，谷歌正式发布了Android 1.0系统，这也是Android系统最早的版本。随后，第一部Android智能手机发布于2008年10月(HTC G1)。其实Android最早可以追溯到2003年。1.0版本还是比较简陋的，只是一个测试版。</li>
<li>2009年4月，谷歌正式推出了Android 1.5。这个版本极大的完善了1.0版本。</li>
<li>2009年9月，谷歌发布了Android 1.6的正式版，当年搭载这款系统的是HTC Hero(G3)。这款系统就已经非常完善了。这个版本到4.0出来时都还有用户在使用。有一段时间的开发需要同时适配1.6和2.x。</li>
<li>2011年第一季度，Android在全球的市场份额首次超过塞班系统，跃居全球第一。也是从此时开始，大量的企业开始重视起Android App的开发。这个时期还属于架构的早期阶段，大多数人还是没有架构的概念的。Android App开发此时也还处于一个早期的探索阶段，没有任何成熟的框架或者库供开发者使用。所以可以说这个时期还属于架构的萌芽期。早期App功能都比较简单，交互也不像现在这么复杂。所以当时但是随着项目的规模增大和业务的复杂度的增长，App开发技术也随之快速发展。</li>
<li>Android 2.0/2.0.1/2.1 Eclair(松饼)2009.10.26</li>
<li>Android 2.2/2.2.1 Froyo(冻酸奶)2010.5.20</li>
<li>Android 2.3 Gingerbread(姜饼)2010.12.7</li>
<li>Android 3.0 Honeycomb(蜂巢)2011.2.2</li>
<li>Android 3.1 Honeycomb(蜂巢) 2011.5.11 </li>
<li>Android 3.2 Honeycomb(蜂巢)2011.7.13</li>
<li>Android 4.0 Ice Cream Sandwich(冰激凌三明治)2011.10.19 </li>
<li>Android 4.1 Jelly Bean(果冻豆)2012.6.28</li>
<li>Android 4.2 Jelly Bean(果冻豆)2012.10.30</li>
<li>Android 4.3 Jelly Bean(果冻豆)2013.7.25</li>
<li>Android 4.4 KitKat(奇巧巧克力)2013.11.01</li>
<li>Android 5.0 Lollipop (棒棒糖) 2014.10.16(Material Design)</li>
<li>Android 6.0 Marshmallow（棉花糖）

Android在正式发行之前，最开始拥有两个内部测试版本，并且以著名的机器人名称来对其进行命名，它们分别是：阿童木（AndroidBeta），发条机器人（Android 1.0）。后来由于涉及到版权问题，谷歌将其命名规则变更为用甜点作为它们系统版本的代号的命名方法。甜点命名法开始于Android 1.5发布的时候。作为每个版本代表的甜点的尺寸越变越大，然后按照26个字母数序：纸杯蛋糕（Android 1.5），甜甜圈（Android 1.6），松饼（Android 2.0/2.1），冻酸奶（Android 2.2），姜饼（Android 2.3），蜂巢（Android 3.0），冰激凌三明治（Android 4.0），果冻豆（Jelly Bean，Android4.1和Android 4.2）。</li>
</ul>
<!-- raw HTML omitted -->
<h4 id="各版本ui对比">各版本UI对比</h4>
<p>
</p>]]></description>
</item>
<item>
    <title>编译Android APP---30条经验帮你提升</title>
    <link>https://www.ithome.me/post/2016/02/22/%E7%BC%96%E8%AF%91android-app-30%E6%9D%A1%E7%BB%8F%E9%AA%8C%E5%B8%AE%E4%BD%A0%E6%8F%90%E5%8D%87/</link>
    <pubDate>Mon, 22 Feb 2016 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2016/02/22/%E7%BC%96%E8%AF%91android-app-30%E6%9D%A1%E7%BB%8F%E9%AA%8C%E5%B8%AE%E4%BD%A0%E6%8F%90%E5%8D%87/</guid>
    <description><![CDATA[<ol>
<li>添加任何第三方库时都要三思而后行，因为这是一个非常严肃的决定。</li>
<li>如何用户无法看到它，<a href="http://riggaroo.co.za/optimizing-layouts-in-android-reducing-overdraw/" target="_blank" rel="noopener noreffer">不要去绘制它！</a>
</li>
<li>除非你真的需要，否则不要使用数据库。</li>
<li>65k方法限制非常容易遇到，你可以通过<a href="https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71" target="_blank" rel="noopener noreffer">multidexing</a>
来修复它。</li>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener noreffer">RxJava</a>
是用来取代异步操作<a href="https://medium.com/swlh/party-tricks-with-rxjava-rxandroid-retrolambda-1b06ed7cd29c" target="_blank" rel="noopener noreffer">AsyncTasks</a>
的最佳替代方案。</li>
<li><a href="http://square.github.io/retrofit/" target="_blank" rel="noopener noreffer">Retrofit</a>
是最佳的网络库。</li>
<li>通过<a href="https://medium.com/android-news/retrolambda-on-android-191cc8151f85" target="_blank" rel="noopener noreffer">Retrolambda</a>
缩短你的代码</li>
<li>组合<a href="https://medium.com/swlh/party-tricks-with-rxjava-rxandroid-retrolambda-1b06ed7cd29c" target="_blank" rel="noopener noreffer">RxJava、Retrofit和Retrolambda</a>
以实现最大化利用。</li>
<li>我使用<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener noreffer">EventBus</a>
，它非常伟大！但是我<strong>并没有大量使用</strong>，因为大量使用会导致代码复杂度提高。</li>
<li><a href="https://medium.com/the-engineering-team/package-by-features-not-layers-2d076df1964d" target="_blank" rel="noopener noreffer">通过功能分包，而不是层次。</a>
</li>
<li>把任何事情都从应用的线程中移除。</li>
<li><a href="http://developer.android.com/tools/help/layoutopt.html" target="_blank" rel="noopener noreffer">lint</a>
你的视图去帮助你优化布局和布局的层次，以便于你辨认哪些视图是多余的、可移除的。</li>
<li>如果你使用<em>gradle</em>，<a href="https://medium.com/the-engineering-team/speeding-up-gradle-builds-619c442113cb" target="_blank" rel="noopener noreffer">你可以加速它！</a>
</li>
<li><a href="https://medium.com/the-engineering-team/speeding-up-gradle-builds-619c442113cb" target="_blank" rel="noopener noreffer">生成你的编译报告</a>
,看看花费的构建时间;</li>
<li>使用一个众所周知的架构;</li>
<li><a href="http://stackoverflow.com/a/67500/794485" target="_blank" rel="noopener noreffer">测试需要花费时间，但是一旦你掌握了它之后，将会获得比未测试更加快速和健壮的代码。</a>
;</li>
<li>使用<a href="http://fernandocejas.com/2015/04/11/tasting-dagger-2-on-android/" target="_blank" rel="noopener noreffer">依赖注入</a>
,让你的应用更模块化并且更容易测试;</li>
<li>收听<a href="http://fragmentedpodcast.com/" target="_blank" rel="noopener noreffer">fragmented podcast</a>
对你来说是有用的。</li>
<li><a href="https://www.reddit.com/r/Android/comments/2hywu9/google_play_only_one_strike_is_needed_to_ruin_you/" target="_blank" rel="noopener noreffer">不要使用你的个人电子邮件作为你的android市场出版商账户;</a>
</li>
<li>总是使用<a href="http://developer.android.com/training/keyboard-input/style.html" target="_blank" rel="noopener noreffer">适当的</a>
输入类型;</li>
<li>使用分析来找出使用平台和隔离缺陷;</li>
<li>掌握新<a href="http://android-arsenal.com/" target="_blank" rel="noopener noreffer">库</a>
的状态(可以通过使用<a href="https://github.com/cesarferreira/dryrun" target="_blank" rel="noopener noreffer">dryrun</a>
来快速测试)</li>
<li>你的底层服务应该做它们需要做的事情，并且尽快的销毁。</li>
<li>使用<a href="http://developer.android.com/reference/android/accounts/AccountManager.html" target="_blank" rel="noopener noreffer">Account Manager</a>
去建议登录用户名和邮箱地址。</li>
<li>使用<strong>CI</strong>(持续集成)去编译和分发你的<code>beta</code>和<code>production</code>的apk。</li>
<li>不要经营你自己的<strong>CI</strong>服务器，因为维护服务器包含磁盘空间/安全问题/更新服务器以免受到SSL攻击等等。应该使用circleci，travis或者shippable。它们便宜并且少一点担心。</li>
<li><a href="https://github.com/Triple-T/gradle-play-publisher" target="_blank" rel="noopener noreffer">自动化部署到<strong>playstore</strong>。</a>
</li>
<li>如果一个库非常大而你只需要使用其中一个小功能子集。你应该找到一个更小的替代方案。(例如依赖<a href="http://developer.android.com/tools/help/proguard.html" target="_blank" rel="noopener noreffer">proguard</a>
)</li>
<li>除非实际需要，不要使用更多的模块。如果模块不是经常修改，需要考虑到的重要问题是：从头编译它们所需要的时间(CI 的编译是一个很好的例子)，甚至检查以前的各个模块的构建是否最新的，比起简单的加载.jar/.aar库时间要增加几乎4倍。</li>
<li><a href="http://developer.android.com/tools/help/vector-asset-studio.html" target="_blank" rel="noopener noreffer">开始考虑为了svg格式放弃png格式;</a>
</li>
<li>为库创建抽象类，如果你仅仅需要一个开关去简单的切换到一个新的库(例如<em>AppLogger.d(“message”)</em> 能够包含 <em>Log.d(TAG, message))</em>，而后意识到<a href="https://github.com/JakeWharton/timber" target="_blank" rel="noopener noreffer">Timber.d(message)</a>
是一个更好的选择。)</li>
<li>监视活跃连接和连接类型(当处于<strong>WIFI</strong>时有<strong>更多的数据更新</strong>？)</li>
<li>监控电源和电池(充电时更多的数据更新?当电池电量低时暂停更新?);</li>
<li>用户界面就像是一个笑话。如果需要去解释它，它不是那么好;</li>
</ol>
<blockquote>
<p>译自：https://medium.com/@cesarmcferreira/building-android-apps-30-things-that-experience-made-me-learn-the-hard-way-313680430bf9#.1lb3hoh97</p>]]></description>
</item>
</channel>
</rss>
