<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/java/</link>
        <description>Java - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Thu, 23 Apr 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>Java集合</title>
    <link>https://www.ithome.me/post/2020/04/23/java%E9%9B%86%E5%90%88/</link>
    <pubDate>Thu, 23 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/04/23/java%E9%9B%86%E5%90%88/</guid>
    <description><![CDATA[<p></p>]]></description>
</item>
<item>
    <title>Java引用类型</title>
    <link>https://www.ithome.me/post/2020/04/20/java%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</link>
    <pubDate>Mon, 20 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/04/20/java%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</guid>
    <description><![CDATA[<p></p>]]></description>
</item>
<item>
    <title>JVM学习记录(一)</title>
    <link>https://www.ithome.me/post/2020/04/17/jvm%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%80/</link>
    <pubDate>Fri, 17 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/04/17/jvm%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%80/</guid>
    <description><![CDATA[<p>JVM思维导图</p>
<p></p>]]></description>
</item>
<item>
    <title>Java常见面试题</title>
    <link>https://www.ithome.me/post/2019/12/05/java%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <pubDate>Thu, 05 Dec 2019 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2019/12/05/java%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
    <description><![CDATA[<blockquote>
<p>作者：SnailClimb
链接：https://juejin.im/post/5dba72c96fb9a02047526331
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="1-面向对象和面向过程的区别">1. 面向对象和面向过程的区别</h2>
<ul>
<li><strong>面向过程</strong> ：<strong>面向过程性能比面向对象高。</strong> 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></li>
<li><strong>面向对象</strong> ：<strong>面向对象易维护、易复用、易扩展。</strong> 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低</strong>。</li>
</ul>
<p>参见 issue :  <a href="https://github.com/Snailclimb/JavaGuide/issues/431" target="_blank" rel="noopener noreffer">面向过程 ：面向过程性能比面向对象高？？</a>
</p>
<blockquote>
<p>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。</p>
<p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</p>
</blockquote>
<h2 id="2-java-语言有哪些特点">2. Java 语言有哪些特点?</h2>
<ol>
<li>简单易学；</li>
<li>面向对象（封装，继承，多态）；</li>
<li>平台无关性（ Java 虚拟机实现平台无关性）；</li>
<li>可靠性；</li>
<li>安全性；</li>
<li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li>
<li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li>
<li>编译与解释并存；</li>
</ol>
<blockquote>
<p>修正（参见： <a href="https://github.com/Snailclimb/JavaGuide/issues/544" target="_blank" rel="noopener noreffer">issue#544</a>
）：C++11开始（2011年的时候）,C++就引入了多线程库，在windows、linux、macos都可以使用<code>std::thread</code>和<code>std::async</code>来创建线程。参考链接：http://www.cplusplus.com/reference/thread/thread/?kw=thread</p>
</blockquote>
<h2 id="3-关于-jvm-jdk-和-jre-最详细通俗的解答">3. 关于 JVM JDK 和 JRE 最详细通俗的解答</h2>
<h3 id="jvm">JVM</h3>
<p>Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p>
<p><strong>什么是字节码?采用字节码的好处是什么?</strong></p>
<blockquote>
<p>在 Java 中，JVM可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。</p>
</blockquote>
<p><strong>Java 程序从源代码到运行一般有下面3步：</strong></p>
<p></p>]]></description>
</item>
<item>
    <title>[转]Google Java编程风格指南</title>
    <link>https://www.ithome.me/post/2014/12/03/%E8%BD%ACgoogle-java%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</link>
    <pubDate>Wed, 03 Dec 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/12/03/%E8%BD%ACgoogle-java%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</guid>
    <description><![CDATA[<!-- raw HTML omitted -->
<h2 id="a-idintroa前言"><!-- raw HTML omitted --><!-- raw HTML omitted -->前言</h2>
<p>这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则， 我们才认为它符合Google的Java编程风格。</p>
<p>与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题， 同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则， 对于那些不是明确强制要求的，我们尽量避免提供意见。</p>
<h3 id="11-术语说明">1.1 术语说明</h3>
<p>在本文档中，除非另有说明：</p>
<ol>
<li>术语class可表示一个普通类，枚举类，接口或是annotation类型(<code>@interface</code>)</li>
<li>术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。
其他的术语说明会偶尔在后面的文档出现。</li>
</ol>
<h3 id="12-指南说明">1.2 指南说明</h3>
<p>本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。 示例中的格式选择不应该被强制定为规则。</p>
<h2 id="a-idsfbasica源文件基础"><!-- raw HTML omitted --><!-- raw HTML omitted -->源文件基础</h2>
<h3 id="21-文件名">2.1 文件名</h3>
<p>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为<code>.java</code>。</p>
<h3 id="22-文件编码utf-8">2.2 文件编码：UTF-8</h3>
<p>源文件编码格式为UTF-8。</p>
<h3 id="23-特殊字符">2.3 特殊字符</h3>
<h4 id="231-空白字符">2.3.1 空白字符</h4>
<p>除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：</p>
<ol>
<li>所有其它字符串中的空白字符都要进行转义。</li>
<li>制表符不用于缩进。</li>
</ol>
<h4 id="232-特殊转义序列">2.3.2 特殊转义序列</h4>
<p>对于具有特殊<a href="http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97" target="_blank" rel="noopener noreffer">转义序列</a>
的任何字符(\b, \t, \n, \f, \r, \“, \‘及)，我们使用它的转义序列，而不是相应的八进制(比如<code>\012</code>)或Unicode(比如<code>\u000a</code>)转义。</p>
<h4 id="233-非ascii字符">2.3.3 非ASCII字符</h4>
<p>对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。</p>
<blockquote>
<blockquote>
<p>Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。
例如：</p>]]></description>
</item>
<item>
    <title>android知识点之【java集合】</title>
    <link>https://www.ithome.me/post/2014/08/09/android%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8Bjava%E9%9B%86%E5%90%88/</link>
    <pubDate>Sat, 09 Aug 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/08/09/android%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8Bjava%E9%9B%86%E5%90%88/</guid>
    <description><![CDATA[<p>[caption id=&ldquo;attachment_642&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;501&rdquo;]<a href="http://www.ithome.me/wp-content/uploads/2014/08/Java%e9%9b%86%e5%90%88.png" target="_blank" rel="noopener noreffer"></a>
 java集合[/caption]</p>]]></description>
</item>
<item>
    <title>[转]十分钟让你明白Objective-C的语法（和Java、C&#43;&#43;的对比）</title>
    <link>https://www.ithome.me/post/2013/12/22/%E8%BD%AC%E5%8D%81%E5%88%86%E9%92%9F%E8%AE%A9%E4%BD%A0%E6%98%8E%E7%99%BDobjective-c%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8Cjavac-%E7%9A%84%E5%AF%B9%E6%AF%94/</link>
    <pubDate>Sun, 22 Dec 2013 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2013/12/22/%E8%BD%AC%E5%8D%81%E5%88%86%E9%92%9F%E8%AE%A9%E4%BD%A0%E6%98%8E%E7%99%BDobjective-c%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8Cjavac-%E7%9A%84%E5%AF%B9%E6%AF%94/</guid>
    <description><![CDATA[<p><strong>很多想开发iOS，或者正在开发iOS的程序员以前都做过Java或者C++，当第一次看到Objective-C的代码时都会头疼，Objective-C的代码在语法上和Java, C++有着很大的区别，有的同学会感觉像是看天书一样。不过，语言都是相通的，有很多共性。下面列出Objective-C语言的语法和Java，C++的对比，这样你就会很容易Objective-C的语法是怎么回事了。</strong></p>
<p><strong>先目睹一下Objective-C头文件和实现文件里都有什么：</strong></p>
<p><strong>头文件：</strong></p>
<p>** **</p>
<p>实现文件， 类似于C++的.cpp文件：</p>
<p>**
**</p>
<p>** **</p>
<p>**
一、函数的对比**
helloworld方法
Java 语言：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">helloWorld</span><span class="p">(</span><span class="kt">boolean</span><span class="w"> </span><span class="n">ishelloworld</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//干点啥</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>C++语言：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">helloWorld</span><span class="p">(</span><span class="kt">bool</span> <span class="n">ishelloworld</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//干点啥
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>Objective-C语言：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-objc" data-lang="objc"><span class="line"><span class="cl"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">HelloWorld:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">ishelloworld</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//干点啥
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>前面带有减号(-) 的方法为实例方法，必须使用类的实例才可以调用的。对应的有+号， 代表是类的静态方法，不需要实例化即可调用。</p>
<p><strong>二、消息。</strong><br>
消息的定义：向对象发送信息。
消息是ios的运行时环境特有的机制。 和C++,Java下的类，或实例调用类或实例的方法类似。我这说的是类似，他们的机制实际上是有很大的差别。
例子：</p>
<p><em>[object  message]</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-objc" data-lang="objc"><span class="line"><span class="cl"><span class="p">[</span><span class="n">object</span>  <span class="nl">message</span><span class="p">:</span><span class="n">param1</span> <span class="nl">withParameter</span><span class="p">:</span><span class="n">param2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">string</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">Hello</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;];</span>
</span></span></code></pre></div><p>上面的代码类似于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">java/c++: object.message()  
</span></span><span class="line"><span class="cl">java/c++: object.message(param1,param2)
</span></span><span class="line"><span class="cl">java/c++: 
</span></span><span class="line"><span class="cl">string *str ;
</span></span><span class="line"><span class="cl">str = new string(&#34;Hello&#34;);
</span></span></code></pre></div><p><strong>三、Import</strong></p>]]></description>
</item>
<item>
    <title>Java建立Zip压缩文件</title>
    <link>https://www.ithome.me/post/2013/03/20/java%E5%BB%BA%E7%AB%8Bzip%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/</link>
    <pubDate>Wed, 20 Mar 2013 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2013/03/20/java%E5%BB%BA%E7%AB%8Bzip%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/</guid>
    <description><![CDATA[<p>本文是关于实现Java建立Zip压缩文件的代码实例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.io.*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.zip.*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">class</span> <span class="nc">Zip</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">IOException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">byte</span><span class="o">[]</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="kt">byte</span><span class="o">[</span><span class="n">512</span><span class="o">]</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">ZipOutputStream</span><span class="w"> </span><span class="n">zout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ZipOutputStream</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="na">length</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">InputStream</span><span class="w"> </span><span class="n">in</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">FileInputStream</span><span class="p">(</span><span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">ZipEntry</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ZipEntry</span><span class="p">(</span><span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">.</span><span class="na">replace</span><span class="p">(</span><span class="n">File</span><span class="p">.</span><span class="na">separatorChar</span><span class="p">,</span><span class="w"> </span><span class="sc">&#39;/&#39;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">zout</span><span class="p">.</span><span class="na">putNextEntry</span><span class="p">(</span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">while</span><span class="w"> </span><span class="p">((</span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">in</span><span class="p">.</span><span class="na">read</span><span class="p">(</span><span class="n">b</span><span class="p">))</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="o">-</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">zout</span><span class="p">.</span><span class="na">write</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="w"> </span><span class="n">0</span><span class="p">,</span><span class="w"> </span><span class="n">len</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">zout</span><span class="p">.</span><span class="na">closeEntry</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">print</span><span class="p">(</span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">zout</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">print</span><span class="p">(</span><span class="n">ZipEntry</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">PrintStream</span><span class="w"> </span><span class="n">err</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">err</span><span class="p">.</span><span class="na">print</span><span class="p">(</span><span class="s">&#34;added &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="na">getMethod</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ZipEntry</span><span class="p">.</span><span class="na">DEFLATED</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kt">long</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="na">getSize</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kt">long</span><span class="w"> </span><span class="n">csize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="na">getCompressedSize</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kt">long</span><span class="w"> </span><span class="n">ratio</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">size</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">csize</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">100</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34; (deflated &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ratio</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34;%)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34; (deflated 0%)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34; (stored 0%)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div>]]></description>
</item>
<item>
    <title>java线程依次执行的简单方法</title>
    <link>https://www.ithome.me/post/2013/03/20/java%E7%BA%BF%E7%A8%8B%E4%BE%9D%E6%AC%A1%E6%89%A7%E8%A1%8C%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</link>
    <pubDate>Wed, 20 Mar 2013 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2013/03/20/java%E7%BA%BF%E7%A8%8B%E4%BE%9D%E6%AC%A1%E6%89%A7%E8%A1%8C%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<p>有时候需要实现一组线程任务，但是我们希望线程一个执行完成后再去执行另外一个，有一个很简单的方法，就是使用thread的join()方法，如下:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->]]></description>
</item>
<item>
    <title>[转载]Ubuntu 12.04 – install sun jdk 6-7</title>
    <link>https://www.ithome.me/post/2013/03/19/%E8%BD%AC%E8%BD%BDubuntu-12/</link>
    <pubDate>Tue, 19 Mar 2013 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2013/03/19/%E8%BD%AC%E8%BD%BDubuntu-12/</guid>
    <description><![CDATA[<p>Ubuntu GNU/Linux 12.04 LTS (Precise Pangolin) released. I wanted to manually install the Sun JDK 6 and 7 on Ubuntu.</p>
<p><strong>Installing Sun JDK 6 on Ubuntu 12.04:</strong></p>
<ul>
<li>
<p>Download the sun jdk 6 bin<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html" title="jdk 1.6.0_32" target="_blank" rel="noopener noreffer">from here</a>
.</p>
</li>
<li>
<p>Make the bin file executeable:</p>
</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>Extract the bin file:</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>Move extracted folder to this location:</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>Install new java source in system:</li>
</ul>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li>Choose default java:</li>
</ul>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li>java version test:</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>Verify the symlinks all point to the new java location:</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>Enable Java plugin for Mozilla Firefox (even for Chrome)</li>
</ul>
<!-- raw HTML omitted -->
<p><strong>Installing Sun JDK 7 on Ubuntu 12.04:</strong></p>]]></description>
</item>
</channel>
</rss>
