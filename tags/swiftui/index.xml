<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Swiftui - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/swiftui/</link>
        <description>Swiftui - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Wed, 04 Nov 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/swiftui/" rel="self" type="application/rss+xml" /><item>
    <title>Flutter、JetPack Compose和SwiftUI对比</title>
    <link>https://www.ithome.me/post/2020/11/04/flutterjetpack-composeswiftui%E5%AF%B9%E6%AF%94/</link>
    <pubDate>Wed, 04 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/11/04/flutterjetpack-composeswiftui%E5%AF%B9%E6%AF%94/</guid>
    <description><![CDATA[<p>从目前技术的发展来看，通过声明式API来构建UI将会成为主流。</p>
<table>
  <thead>
      <tr>
          <th>框架</th>
          <th>Flutter</th>
          <th>JetPack Compose</th>
          <th>SwiftUI</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>支持平台</td>
          <td>Android、iOS、Web、Desktop</td>
          <td>Android</td>
          <td>iOS、MacOS、iPadOS</td>
      </tr>
      <tr>
          <td>开发语言</td>
          <td>dart</td>
          <td>kotlin</td>
          <td>swift</td>
      </tr>
      <tr>
          <td>性能</td>
          <td>好</td>
          <td>优</td>
          <td>优</td>
      </tr>
      <tr>
          <td>优点</td>
          <td>跨平台</td>
          <td>原生，简化UI构建</td>
          <td>原生，简化UI构建</td>
      </tr>
      <tr>
          <td>缺点</td>
          <td>性能相比原生稍差，跨多平台目前还不完善，UI嵌套深</td>
          <td>不支持跨平台，Android的UI构建包</td>
          <td>仅支持Apple自家的跨平台，iOS的UI构建包，缺乏竞争力</td>
      </tr>
  </tbody>
</table>
<h3 id="1-如何选择">1. 如何选择？</h3>
<p>这问题是个悖论，因为这三个东西完全不一样，面向的场景和未来也不一样。</p>
<h5 id="flutter">flutter</h5>
<p>跨平台，使用自己的skia引起渲染，支持移动端(android、iOS)、web、桌面应用程序。
所有的跨平台框架都绕不开目标平台，所以flutter想使用它来做跨平台开发，你得懂一些Android知识，iOS知识，h5知识。尤其在项目越来越复杂的情况下，和目标平台的耦合越来越深，导致后期还得进行相当一部分的原生开发。
但是跨平台是趋势，从iOS和Android出现的时候跨平台问题就开始探讨了，flutter用于快速出前期产品非常有效，学会它毫无疑问会提升自己的竞争力。</p>
<h5 id="jetpack-compose">JetPack Compose</h5>
<p>Android UI工具包，只能用于AndroidUI构建，未来发展如何不知道，开发方式类似flutter，可以大幅度简化原来Android UI的构建方式，短时间应该不会完全普及，有闲暇与兴趣的可以去学学。</p>
<h5 id="swiftui">SwiftUI</h5>
<p>Apple未来的UI统一方案，能用于Apple全家桶的UI构建，以Apple的号召力，应该会大力推动它普及，iOS开发都应该去学。</p>
<h3 id="2-代码对比">2. 代码对比</h3>]]></description>
</item>
</channel>
</rss>
