<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>IOS - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/ios/</link>
        <description>IOS - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Tue, 31 Jul 2018 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/ios/" rel="self" type="application/rss+xml" /><item>
    <title>jenkins&#43;fastlane&#43;ios自动化打包实战</title>
    <link>https://www.ithome.me/post/2018/07/31/jenkins-fastlane-ios%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98/</link>
    <pubDate>Tue, 31 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/31/jenkins-fastlane-ios%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98/</guid>
    <description><![CDATA[<p>当项目达到一定规模后，为了便于管理，我们都会引入自动化构建。本篇主要是讲述如果通过jenkins和fastlane实现iOS的打包。</p>
<p>关于jenkins的搭建就不多说了，大家可以按照网上的文章去配置，基本都是傻瓜式一键安装。</p>
<p>本文将要解决的问题是如何在jenkins搭建iOS的自动编译job。</p>
<blockquote>
<p>构建iOS的包只能在Mac机器上进行，如果Jenkins搭建在Linux或者非Mac机器上，需要在Jenkins中配置slave节点连接到Mac电脑。</p>
</blockquote>
<h3 id="1-准备工作"><strong>1. 准备工作</strong></h3>
<blockquote>
<p>Q:为何是通过fastlane来构建iOS，而不是通过Jenkins的Xcode插件来构建呢？
A:Xcode插件方式不仅配置麻烦，而且配置完成后还需要大量的调试工作才能正确编译。而fastlane只需要配置一次，简单方便。</p>
</blockquote>
<p>既然是通过fastlane来构建,那么我们首先得需要配置好fastlane相关的东西。</p>
<h4 id="11-安装fastlane"><strong>1.1 安装fastlane</strong></h4>
<p><em>在Mac编译机上需要配置好fastlane</em></p>
<p>打包iOS我们需要保证xcode命令行已经正确安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">xcode-select --install  //命令行输入，如果未安装会弹出对话框提示安装，否则会提示已经安装
</span></span></code></pre></div><p>可以通过两种方式来安装<a href="https://fastlane.tools/" target="_blank" rel="noopener noreffer">fastlane</a>

<strong>方式一：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[sudo] gem install fastlane -NV
</span></span></code></pre></div><p><strong>方式二：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">brew cask install fastlane
</span></span></code></pre></div><h4 id="12-项目中配置fastlane"><strong>1.2 项目中配置fastlane</strong></h4>
<p><em>给我们需要自动化编译的iOS工程配置fastlane</em></p>
<p>假如我们现在有一个<code>BlocklySample</code>的工程，我们需要在项目根目录下执行命令行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">fastlane init
</span></span></code></pre></div><p>会有如下图这样的提示，需要我们选择哪种任务，这里我们可以选<code>2</code>或者<code>3</code>。选择这两个选择后会提示让你输入iOS开发者的账号密码，这样会自动给你生成团队信息、bid和基本编译脚本等等。
</p>
<p>执行完成后在项目根目录下会自动新建一个fastlane的目录
</p>
<p>修改fastlane目录下的Fastfile文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="c1"># This file contains the fastlane.tools configuration</span>
</span></span><span class="line"><span class="cl"><span class="c1"># You can find the documentation at https://docs.fastlane.tools</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># For a list of all available actions, check out</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     https://docs.fastlane.tools/actions</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># For a list of all available plugins, check out</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     https://docs.fastlane.tools/plugins/available-plugins</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Uncomment the line if you want fastlane to automatically update itself</span>
</span></span><span class="line"><span class="cl"><span class="c1"># update_fastlane</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">default_platform</span><span class="p">(:</span><span class="n">ios</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">platform</span> <span class="p">:</span><span class="n">ios</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="n">desc</span> <span class="s2">&#34;Push a new release build to the App Store&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">lane</span> <span class="p">:</span><span class="n">release_appstore</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="n">increment_build_number</span><span class="p">(</span><span class="n">xcodeproj</span><span class="p">:</span> <span class="s2">&#34;xxx.xcodeproj&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">update_project_provisioning</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 之前有sigh下载的描述文件存储路径</span>
</span></span><span class="line"><span class="cl">        <span class="n">profile</span><span class="p">:</span><span class="s2">&#34;fastlane/provision/xxx.mobileprovision&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 打包配置，Debug，Release</span>
</span></span><span class="line"><span class="cl">        <span class="n">build_configuration</span><span class="p">:</span><span class="s2">&#34;Release&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">automatic_code_signing</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 工程文件所在路径</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span><span class="p">:</span><span class="s2">&#34;xxx.xcodeproj&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 是否使用自动签名，这里如果是打包的话应该一般都为false吧，默认也是false</span>
</span></span><span class="line"><span class="cl">        <span class="n">use_automatic_signing</span><span class="p">:</span><span class="bp">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 这个就不用说了，需要修改的targets</span>
</span></span><span class="line"><span class="cl">        <span class="n">targets</span><span class="p">:</span><span class="s2">&#34;xxx&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 用哪种方式打包“iPhone Develop”还是“iPhone Distribution”</span>
</span></span><span class="line"><span class="cl">        <span class="n">code_sign_identity</span><span class="p">:</span><span class="s2">&#34;iPhone Distribution&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 描述文件名称， 也就是使用哪个描述文件打包</span>
</span></span><span class="line"><span class="cl">        <span class="n">profile_name</span><span class="p">:</span><span class="s2">&#34;xxx&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">scheme_name</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">configuration</span> <span class="o">=</span> <span class="s1">&#39;AppStore&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span> <span class="o">=</span> <span class="n">get_info_plist_value</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="s2">&#34;./#{scheme_name}/Info.plist&#34;</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s2">&#34;CFBundleShortVersionString&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">build</span> <span class="o">=</span> <span class="n">get_info_plist_value</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="s2">&#34;./#{scheme_name}/Info.plist&#34;</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s2">&#34;CFBundleVersion&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_directory</span> <span class="o">=</span> <span class="ne">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&#34;..&#34;</span><span class="p">,</span> <span class="n">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">)</span> <span class="o">+</span> <span class="ne">File</span><span class="p">::</span><span class="ne">Separator</span> <span class="o">+</span> <span class="s1">&#39;build&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_name</span> <span class="o">=</span> <span class="s2">&#34;#{scheme_name}_#{configuration}_#{version}_#{build}_#{Time.now.strftime(&#39;%Y%m</span><span class="si">%d</span><span class="s2">%H%M%S&#39;)}.ipa&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">build_app</span><span class="p">(</span><span class="n">workspace</span><span class="p">:</span> <span class="s2">&#34;xxx.xcworkspace&#34;</span><span class="p">,</span> <span class="n">scheme</span><span class="p">:</span> <span class="s2">&#34;xxx&#34;</span><span class="p">,</span> <span class="n">export_method</span><span class="p">:</span> <span class="s2">&#34;app-store&#34;</span><span class="p">,</span> <span class="n">output_directory</span><span class="p">:</span> <span class="n">output_directory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">output_name</span><span class="p">:</span> <span class="n">output_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">upload_to_app_store</span>
</span></span><span class="line"><span class="cl">  <span class="n">end</span>
</span></span><span class="line"><span class="cl">  <span class="n">desc</span> <span class="s2">&#34;Push a new release build to the Testflight&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">lane</span> <span class="p">:</span><span class="n">release_testflight</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="n">update_project_provisioning</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 之前有sigh下载的描述文件存储路径</span>
</span></span><span class="line"><span class="cl">        <span class="n">profile</span><span class="p">:</span><span class="s2">&#34;fastlane/provision/xxx.mobileprovision&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 打包配置，Debug，Release</span>
</span></span><span class="line"><span class="cl">        <span class="n">build_configuration</span><span class="p">:</span><span class="s2">&#34;Release&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">automatic_code_signing</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 工程文件所在路径</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span><span class="p">:</span><span class="s2">&#34;xxx.xcodeproj&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 是否使用自动签名，这里如果是打包的话应该一般都为false吧，默认也是false</span>
</span></span><span class="line"><span class="cl">        <span class="n">use_automatic_signing</span><span class="p">:</span><span class="bp">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 这个就不用说了，需要修改的targets</span>
</span></span><span class="line"><span class="cl">        <span class="n">targets</span><span class="p">:</span><span class="s2">&#34;xxx&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 用哪种方式打包“iPhone Develop”还是“iPhone Distribution”</span>
</span></span><span class="line"><span class="cl">        <span class="n">code_sign_identity</span><span class="p">:</span><span class="s2">&#34;iPhone Distribution&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 描述文件名称， 也就是使用哪个描述文件打包</span>
</span></span><span class="line"><span class="cl">        <span class="n">profile_name</span><span class="p">:</span><span class="s2">&#34;xxx&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">scheme_name</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">configuration</span> <span class="o">=</span> <span class="s1">&#39;AppStore&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span> <span class="o">=</span> <span class="n">get_info_plist_value</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="s2">&#34;./#{scheme_name}/Info.plist&#34;</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s2">&#34;CFBundleShortVersionString&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">build</span> <span class="o">=</span> <span class="n">get_info_plist_value</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="s2">&#34;./#{scheme_name}/Info.plist&#34;</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s2">&#34;CFBundleVersion&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_directory</span> <span class="o">=</span> <span class="ne">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&#34;..&#34;</span><span class="p">,</span> <span class="n">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">)</span> <span class="o">+</span> <span class="ne">File</span><span class="p">::</span><span class="ne">Separator</span> <span class="o">+</span> <span class="s1">&#39;build&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_name</span> <span class="o">=</span> <span class="s2">&#34;#{scheme_name}_#{configuration}_#{version}_#{build}_#{Time.now.strftime(&#39;%Y%m</span><span class="si">%d</span><span class="s2">%H%M%S&#39;)}.ipa&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">build_app</span><span class="p">(</span><span class="n">workspace</span><span class="p">:</span> <span class="s2">&#34;xxx.xcworkspace&#34;</span><span class="p">,</span> <span class="n">scheme</span><span class="p">:</span> <span class="s2">&#34;xxx&#34;</span><span class="p">,</span> <span class="n">export_method</span><span class="p">:</span> <span class="s2">&#34;app-store&#34;</span><span class="p">,</span> <span class="n">output_directory</span><span class="p">:</span> <span class="n">output_directory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">output_name</span><span class="p">:</span> <span class="n">output_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">upload_to_testflight</span>
</span></span><span class="line"><span class="cl">  <span class="n">end</span>
</span></span><span class="line"><span class="cl">  <span class="n">desc</span> <span class="s2">&#34;Push a new release build to the Ad Hoc&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">lane</span> <span class="p">:</span><span class="n">release_adhoc</span> <span class="k">do</span> <span class="o">|</span><span class="n">option</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  	<span class="c1"># cocoapods</span>
</span></span><span class="line"><span class="cl">  	<span class="c1">#根据传入参数version设置app的版本号</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># increment_version_number(version_number: option[:version]) </span>
</span></span><span class="line"><span class="cl">	<span class="c1">#自动增加build号</span>
</span></span><span class="line"><span class="cl">	<span class="c1">#increment_build_number</span>
</span></span><span class="line"><span class="cl">  	<span class="n">update_project_provisioning</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 之前有sigh下载的描述文件存储路径</span>
</span></span><span class="line"><span class="cl">        <span class="n">profile</span><span class="p">:</span><span class="s2">&#34;fastlane/provision/xxx.mobileprovision&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 打包配置，Debug，Release</span>
</span></span><span class="line"><span class="cl">        <span class="n">build_configuration</span><span class="p">:</span><span class="s2">&#34;Release&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">  	<span class="n">automatic_code_signing</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 工程文件所在路径</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span><span class="p">:</span><span class="s2">&#34;xxx.xcodeproj&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 是否使用自动签名，这里如果是打包的话应该一般都为false吧，默认也是false</span>
</span></span><span class="line"><span class="cl">        <span class="n">use_automatic_signing</span><span class="p">:</span><span class="bp">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 打包的team ID， 也就是打包使用的证书中的team ID，这个如果不知道是什么的话可以在xCode中设置好签名用的描述文件后到xcodeproj下的pbxproj文件中搜索“DEVELOPMENT_TEAM”，它的值就是了</span>
</span></span><span class="line"><span class="cl">        <span class="n">team_id</span><span class="p">:</span><span class="s2">&#34;RRRRR5555&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 这个就不用说了，需要修改的targets</span>
</span></span><span class="line"><span class="cl">        <span class="n">targets</span><span class="p">:</span><span class="s2">&#34;xxx&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 用哪种方式打包“iPhone Develop”还是“iPhone Distribution”</span>
</span></span><span class="line"><span class="cl">        <span class="n">code_sign_identity</span><span class="p">:</span><span class="s2">&#34;iPhone Distribution&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 描述文件名称， 也就是使用哪个描述文件打包</span>
</span></span><span class="line"><span class="cl">        <span class="n">profile_name</span><span class="p">:</span><span class="s2">&#34;xxx&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#证书签名</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># sigh</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#编译打包</span>
</span></span><span class="line"><span class="cl">    <span class="n">scheme_name</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">configuration</span> <span class="o">=</span> <span class="s1">&#39;Release&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span> <span class="o">=</span> <span class="n">get_info_plist_value</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="s2">&#34;./#{scheme_name}/Info.plist&#34;</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s2">&#34;CFBundleShortVersionString&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">build</span> <span class="o">=</span> <span class="n">get_info_plist_value</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="s2">&#34;./#{scheme_name}/Info.plist&#34;</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s2">&#34;CFBundleVersion&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_directory</span> <span class="o">=</span> <span class="ne">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&#34;..&#34;</span><span class="p">,</span> <span class="n">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">)</span> <span class="o">+</span> <span class="ne">File</span><span class="p">::</span><span class="ne">Separator</span> <span class="o">+</span> <span class="s1">&#39;build&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_name</span> <span class="o">=</span> <span class="s2">&#34;#{scheme_name}_#{configuration}_#{version}_#{build}_#{Time.now.strftime(&#39;%Y%m</span><span class="si">%d</span><span class="s2">%H%M%S&#39;)}.ipa&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">gym</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    	<span class="n">scheme</span><span class="p">:</span> <span class="n">scheme_name</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    	<span class="n">clean</span><span class="p">:</span> <span class="bp">true</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    	<span class="n">silent</span><span class="p">:</span><span class="bp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    	<span class="n">export_method</span><span class="p">:</span><span class="s1">&#39;ad-hoc&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    	<span class="n">export_options</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      	  <span class="n">provisioningProfiles</span><span class="p">:</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">      	  <span class="c1">#前面的是bundle id，后面的是对应用到的mobileprovision，只需要名字，不需要后缀</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;me.ithome.xxx&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;xxx&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}},</span>
</span></span><span class="line"><span class="cl">        <span class="n">configuration</span><span class="p">:</span> <span class="n">configuration</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">output_directory</span><span class="p">:</span> <span class="n">output_directory</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span><span class="p">:</span> <span class="n">output_name</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="c1"># 签名证书的名称，去钥匙串-登录-证书里面复制</span>
</span></span><span class="line"><span class="cl">        <span class="n">codesigning_identity</span><span class="p">:</span><span class="s1">&#39;iPhone Distribution: xxx (Rxxx47)&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">export_xcargs</span><span class="p">:</span> <span class="s1">&#39;-allowProvisioningUpdates&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 上传到蒲公英，需要安装pgyer插件</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pgyer(api_key: &#34;aaaa&#34;, user_key: &#34;bbbb&#34;)</span>
</span></span><span class="line"><span class="cl">  <span class="n">end</span>
</span></span><span class="line"><span class="cl"><span class="n">end</span>
</span></span></code></pre></div><blockquote>
<ul>
<li>上述脚本中有部分xxx之类的东西，需要自行替换成自己项目的。</li>
<li>所有脚本中用到的xxx.mobileprovision都需要双击安装一次，否者会提示找不到。</li>
<li>需要安装好p12证书文件。</li>
</ul>
</blockquote>
<p>修改完成后我们就有了三个命令，用来分别打包上传到appstore、testflight和蒲公英。
<code>fastlane release_appstore</code>
<code>fastlane release_testflight</code>
<code>fastlane release_adhoc</code></p>]]></description>
</item>
<item>
    <title>flutter开发系列之二--第一个应用</title>
    <link>https://www.ithome.me/post/2018/07/18/flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</link>
    <pubDate>Wed, 18 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/18/flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</guid>
    <description><![CDATA[<p>好了，我们已经配置好环境变量。现在开始我们的第一个Flutter应用。</p>
<p>Flutter项目可以通过命令行创建，也可以用IDE创建。</p>
<h3 id="1-命令行方式创建flutter项目">1. 命令行方式创建Flutter项目</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter create myapp
</span></span><span class="line"><span class="cl">cd myapp
</span></span></code></pre></div><p>也可以指定pkg/bundleid</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter create --org com.example --template=app myapp
</span></span><span class="line"><span class="cl">cd myapp
</span></span></code></pre></div><p>然后，如果当前有模拟器运行，直接<code>flutter run</code>，否者安装下面的命令运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter emulators //列出可用的模拟器
</span></span><span class="line"><span class="cl">flutter emulators --launch &lt;emulator id&gt; //启动模拟器 emulator id=&gt;apple_ios_simulator
</span></span></code></pre></div><p>命令行方式就介绍这些了，有兴趣的请自行参考https://flutter.io/developing-packages/</p>
<h3 id="2-android-studio">2. Android Studio</h3>
<p>好了，重点来了，这也是我所推荐的方式，通过AS来开发一个Flutter应用。</p>
<p>请跟着步骤来吧。</p>
<p>打开AS，启动到导航页，选择<code>Start a new Flutter project</code>
</p>
<p>第二步，选择<code>Flutter Application</code>，然后<code>Next</code>
</p>
<p>第三步，填写项目信息，继续<code>Next</code>
</p>
<p>第四步，填写包名/bundle id，<code>Finish</code>
</p>]]></description>
</item>
<item>
    <title>flutter开发系列之一--环境配置</title>
    <link>https://www.ithome.me/post/2018/07/16/flutter%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Mon, 16 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/16/flutter%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[<p>flutter出来已经一段时间，相信有不少开发同学都去尝试了，现在跨平台开发技术火爆移动开发圈，比如RN，Weex等等，但是这些方案如果不是有特殊需求，一般并没有动力去学，flutter不同，google大厂出品，值得信赖。这系列文章主要是用来记录自己学习flutter的一些经验和遇到的问题。</p>
<h3 id="1-准备">1. 准备</h3>
<blockquote>
<p>因我使用的开发环境是Mac系统，因此本系列所有的配置都是Mac为主
由于网络问题，部分用户可能无法打开flutter官网，这里推荐<a href="https://flutter-io.cn/" target="_blank" rel="noopener noreffer">Flutter中文站</a>
</p>
</blockquote>
<p><strong>在开始flutter之前，请先安装好Xcode和Android Studio</strong></p>
<h3 id="2-安装xcode和android-studio">2. 安装Xcode和Android Studio</h3>
<h4 id="21-xcode">2.1 Xcode</h4>
<blockquote>
<p>直接在Mac App Store下载安装Xcode。</p>
</blockquote>
<p>安装完Xcode后还需要安装一些依赖库。而这些库需要通过brew安装。</p>
<ol>
<li>首先安装brew(已经安装过的跳过此步骤)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;
</span></span></code></pre></div><ol start="2">
<li>安装一些依赖库</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">brew update
</span></span><span class="line"><span class="cl">brew install --HEAD libimobiledevice
</span></span><span class="line"><span class="cl">brew install ideviceinstaller ios-deploy cocoapods
</span></span><span class="line"><span class="cl">pod setup
</span></span></code></pre></div><ol start="3">
<li>命令行启动模拟器</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">open -a Simulator  //打开默认模拟器
</span></span></code></pre></div><p>或者也可以打开指定的模拟器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">xcrun instruments -s //列出你安装的所有可用的设备
</span></span><span class="line"><span class="cl">xcrun instruments -w &#34;iPhone X&#34; //打开指定模拟器
</span></span></code></pre></div><h4 id="22-android-studio">2.2 Android Studio</h4>
<blockquote>
<p>温馨提示，这些步骤可能因为国内网络问题导致不成功，请自行解决访问国外网络的问题。</p>
</blockquote>
<ol>
<li>
<p>下载并安装<a href="https://developer.android.com/studio/" target="_blank" rel="noopener noreffer">Android Studio</a>
</p>
</li>
<li>
<p>启动AS，根据配置向导一步步安装即可。</p>
</li>
<li>
<p>因Flutter默认使用的Android API 27和buildtools 27.0.3。而AS默认安装的最新版。所以这两个东西需要我们自己手动安装。按照下图打开SDK Manager。</p>
</li>
</ol>
<p></p>]]></description>
</item>
<item>
    <title>iOS8 Xcode6中Size Classes简单使用教程</title>
    <link>https://www.ithome.me/post/2014/12/15/ios8-xcode6%E4%B8%ADsize-classes%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
    <pubDate>Mon, 15 Dec 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/12/15/ios8-xcode6%E4%B8%ADsize-classes%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
    <description><![CDATA[<p><code>Size classes</code>是iOS8中新特性,有了它可以根据设备屏幕或者旋转状态来自定义app布局,在iOS8之前,开发者需要用多个Storyboards使用不同的UI布局来适配旋转状态及不同的设备。在这篇教程中我们主要看看在Xcode6中如何使用<code>Size Classes</code>来适配。</p>
<p>打开Xcode,新建项目选择Single View Application,Product Name填写<strong>iOS8SizeClassesTutorial</strong>,Organization Name和Organization Identifier根据自己填写,选择<a href="http://www.swiftmi.com/" target="_blank" rel="noopener noreffer">Swift语言</a>
与<code>Universal</code>设备。</p>
<p></p>
<p>打开storyboard,在Xcode6中视图控制显示的为正方形,这是因为size class默认为<code>Any width</code>与<code>And height</code>。在storyboard给每个角落位置增加一个按钮,名称分别为&quot;top-left,top-right, bottom-left and bottom-right&quot;.将ViewController背景颜色设置为Cyan,这时Storyboard看起来大致如下：</p>
<p></p>
<p>编译运行后,可以发现右边的2个按钮不见了,这是因为layout是为And-width和Any-height设计的。接下来,我们将按钮固定在每个角落上,选择top-left button,Ctrl+Drag方式拉到左边ViewController上并选择“Leading Space to Container Margin”（如下图）,这时按钮Button将会固定在left位置。</p>
<p></p>
<p></p>
<p>接下来,再按以上方式然后选择“Top Space to Top Layout Guide”，这时按钮Button则会固定在Top位置。</p>]]></description>
</item>
<item>
    <title>为iPhone 6设计自适应布局</title>
    <link>https://www.ithome.me/post/2014/12/15/%E4%B8%BAiphone-6%E8%AE%BE%E8%AE%A1%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</link>
    <pubDate>Mon, 15 Dec 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/12/15/%E4%B8%BAiphone-6%E8%AE%BE%E8%AE%A1%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</guid>
    <description><![CDATA[<h1 id="为iphone-6设计自适应布局">为iPhone 6设计自适应布局</h1>
<p>Apple从iOS 6加入了Auto Layout后开始就比较委婉的开始鼓励、建议开发者使用自适应布局，但是到目前为止，我感觉大多数开发者一直在回避这个问题，不管是不是由于历史原因造成的，至少他们在心底还坚守着固定布局的老传统思想。</p>
<p>随着iPhone6、iPhone6 Plus的到来，使用自适应布局更是迫在眉睫的事，固定布局的老传统思想脆弱的不堪一击。现在的iPhone有4种尺寸，如果算上iPad，现在Apple的iOS设备有5种尺寸。我们在准备使用自适应布局设计应用界面之前，可以把这5种尺寸划分为3种分辨率和屏幕方向，这样在设计时分类会更加清晰一些。</p>
<p>我们先来看一张自适应布局的效果图：</p>
<p></p>
<p>当你们学习完这篇文章后，你们应该会比较自如的使用 storyboard、constaints、size classes 这三个Apple在Xcode里提供的工具，去探索和构建巧妙的自适应布局。</p>
<p><strong>Storyboards</strong></p>
<p>在Xcode中，storyboard是一个可以让我们对应用界面进行可视化布局的工具，你首先可以在storyboard文件中看到一个或若干个iOS设备屏幕大小的布局区，然后你可以从组件库（Object Library）中拖拽组件到屏幕布局区中进行布局（比如按钮、图片、文本框、labels等），你还可以定义屏幕布局区之间的连接关系。</p>
<p>用Xcode的术语来说，人们可以看到、触碰到或以其他方式（按钮、图片、文本框、labels等）进行交互的用户界面被称为views。屏幕中包含和管理这些views的容器称为view controller。</p>
<p>当我们在storyboard中添加一个view controller后，我们所看到的并不是一个我们熟知的屏幕尺寸，而是一个600X600的正方形：</p>
<p></p>
<p>从上图我们可以很明显的看出，storyboard中显示的屏幕尺寸不是实际设备的尺寸。Apple这样做的目的是将屏幕尺寸进行了抽象化，也就是说你可以将这个正方形的屏幕看成iphone4的屏幕，也可以将它看成iphone6的屏幕。</p>
<p><strong>模拟器的尺寸</strong></p>
<p>当你习惯了600X600的屏幕后，你可能会用着很爽，但是有些时候，我们也需要将它改成实际的屏幕尺寸来设计一些东西。</p>
<p>我们可以很方便的在Xcode中改变view controller的模拟屏幕尺寸和屏幕方向：</p>
<p></p>
<p><strong>布局约束</strong></p>
<p>介绍布局约束的最好、最直观的方法就是向你们展示一个示例。</p>
<p>首先我们将storyboard中的屏幕布局区域的尺寸调整为iphone5s的尺寸，也就是4寸屏幕，然后添加两个正方形的view，并排放置在屏幕顶部，一个设置为蓝色，一个设置为粉色。</p>
<p></p>
<p>我们选择iPhone5s模拟器设备并编译运行应用，可以看到一蓝一粉这两个方块按照我们设定的那样杵在竖屏方向的屏幕上，没有问题。当我们把设备调整为横屏时，这两个方块像拥护党一样拥护着他们的坐标位置，所以在横屏的时候看着就不是那么完美：</p>
<p></p>]]></description>
</item>
<item>
    <title>[转]20个美丽的移动APP界面设计欣赏和APP素材下载</title>
    <link>https://www.ithome.me/post/2014/10/07/%E8%BD%AC20%E4%B8%AA%E7%BE%8E%E4%B8%BD%E7%9A%84%E7%A7%BB%E5%8A%A8app%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E6%AC%A3%E8%B5%8F%E5%92%8Capp%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD/</link>
    <pubDate>Tue, 07 Oct 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/10/07/%E8%BD%AC20%E4%B8%AA%E7%BE%8E%E4%B8%BD%E7%9A%84%E7%A7%BB%E5%8A%A8app%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E6%AC%A3%E8%B5%8F%E5%92%8Capp%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD/</guid>
    <description><![CDATA[<p>如今移动 APP 界面设计师正变得越来越吃香啦，因为我们的生活已经全面智能化了，移动手机上的 APP 层出不穷，所以，APP 设计也随着火起来啦！</p>
<p>现在对 APP 应用程序设计师和开发人员有很高的需求，特别是在用户 UI 界面。用户界面设计以用户体验和互动，同时易于使用的是重要的，一个有吸引力的还是实用的设计是一个应用程序成功的关键。这块的 APP 设计是很重要和精细的设计工作。</p>
<p>下面是 20 个美丽的移动 APP 界面设计欣赏和 APP 素材下载，希望大家喜欢！其中也许一些 APP 设计素材在之前我们报道过，临摹过，不过没关系，我们可以继续来回顾这些优秀的 APP 设计界面欣赏或是 APP 设计素材下载。</p>
<p>1. <strong><a href="http://www.behance.net/gallery/iOS-7-UI-Components/10460735" target="_blank" rel="noopener noreffer">iOS 7 UI Components by GraphicBurger</a>
</strong></p>
<p></p>
<p></p>
<p>2. <strong><a href="http://www.behance.net/gallery/Flat-Design-UI-Components/9571075" target="_blank" rel="noopener noreffer">Flat Design UI Components by GraphicBurger</a>
</strong></p>
<p></p>
<p>3. <strong><a href="http://www.behance.net/gallery/Free-Flat-UI-Kit/9819319" target="_blank" rel="noopener noreffer">Free Flat UI Kit by Enes Daniş</a>
</strong></p>]]></description>
</item>
<item>
    <title>[转]IOS, xib和storyboard的混用</title>
    <link>https://www.ithome.me/post/2014/08/07/%E8%BD%ACios-xib%E5%92%8Cstoryboard%E7%9A%84%E6%B7%B7%E7%94%A8/</link>
    <pubDate>Thu, 07 Aug 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/08/07/%E8%BD%ACios-xib%E5%92%8Cstoryboard%E7%9A%84%E6%B7%B7%E7%94%A8/</guid>
    <description><![CDATA[<p>1. 从xib的viewcontroll中启动storyboard 或者 从一个storyboard切换到另一个storyboard：</p>
<p>[objc]</p>
<ul>
<li>(IBAction)openStoryboard:(id)sender {<br>
UIStoryboard *secondStoryboard = [UIStoryboard storyboardWithName:@&quot;SecondStoryboard&quot; bundle:nil];<br>
[self presentModalViewController:[secondStoryboard instantiateInitialViewController] animated:YES];<br>
}
[/objc]</li>
</ul>
<p>2. 从storyboard切换到xib：</p>
<p>[objc]
LoginViewController *loginViewController = [[LoginViewController alloc] initWithNibName:@&quot;LoginViewController&quot; bundle:nil];<br>
[/objc]</p>
<p>然后用push或者modal方法启用这个controller</p>
<p>3. 从xib或者storyboard中启动里一个storyboard的某一个controller上：</p>
<p>[objc]
[storyboard instantiateViewControllerWithIdentifier&quot;actionList&quot;];
[/objc]</p>
<p>原文地址：http://blog.csdn.net/lrenjun/article/details/10235687</p>]]></description>
</item>
</channel>
</rss>
