<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>IOS - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/ios/</link>
        <description>IOS - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Tue, 31 Jul 2018 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/ios/" rel="self" type="application/rss+xml" /><item>
    <title>jenkins&#43;fastlane&#43;ios自动化打包实战</title>
    <link>https://www.ithome.me/post/2018/07/31/jenkins-fastlane-ios%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98/</link>
    <pubDate>Tue, 31 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/31/jenkins-fastlane-ios%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98/</guid>
    <description><![CDATA[<p>当项目达到一定规模后，为了便于管理，我们都会引入自动化构建。本篇主要是讲述如果通过jenkins和fastlane实现iOS的打包。</p>
<p>关于jenkins的搭建就不多说了，大家可以按照网上的文章去配置，基本都是傻瓜式一键安装。</p>
<p>本文将要解决的问题是如何在jenkins搭建iOS的自动编译job。</p>
<blockquote>
<p>构建iOS的包只能在Mac机器上进行，如果Jenkins搭建在Linux或者非Mac机器上，需要在Jenkins中配置slave节点连接到Mac电脑。</p>
</blockquote>
<h3 id="1-准备工作"><strong>1. 准备工作</strong></h3>
<blockquote>
<p>Q:为何是通过fastlane来构建iOS，而不是通过Jenkins的Xcode插件来构建呢？
A:Xcode插件方式不仅配置麻烦，而且配置完成后还需要大量的调试工作才能正确编译。而fastlane只需要配置一次，简单方便。</p>
</blockquote>
<p>既然是通过fastlane来构建,那么我们首先得需要配置好fastlane相关的东西。</p>
<h4 id="11-安装fastlane"><strong>1.1 安装fastlane</strong></h4>
<p><em>在Mac编译机上需要配置好fastlane</em></p>
<p>打包iOS我们需要保证xcode命令行已经正确安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">xcode-select --install  //命令行输入，如果未安装会弹出对话框提示安装，否则会提示已经安装
</span></span></code></pre></div><p>可以通过两种方式来安装<a href="https://fastlane.tools/" target="_blank" rel="noopener noreffer">fastlane</a>

<strong>方式一：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[sudo] gem install fastlane -NV
</span></span></code></pre></div><p><strong>方式二：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">brew cask install fastlane
</span></span></code></pr]]></description>
</item>
<item>
    <title>flutter开发系列之二--第一个应用</title>
    <link>https://www.ithome.me/post/2018/07/18/flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</link>
    <pubDate>Wed, 18 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/18/flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</guid>
    <description><![CDATA[<p>好了，我们已经配置好环境变量。现在开始我们的第一个Flutter应用。</p>
<p>Flutter项目可以通过命令行创建，也可以用IDE创建。</p>
<h3 id="1-命令行方式创建flutter项目">1. 命令行方式创建Flutter项目</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter create myapp
</span></span><span class="line"><span class="cl">cd myapp
</span></span></code></pre></div><p>也可以指定pkg/bundleid</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter create --org com.example --template=app myapp
</span></span><span class="line"><span class="cl">cd myapp
</span></span></code></pre></div><p>然后，如果当前有模拟器运行，直接<code>flutter run</code>，否者安装下面的命令运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter emulators //列出可用的模拟器
</span></span><span class="line"><span class="cl">flutter emulators --launch &lt;emulator id&gt; //启动模拟器 emulator id=&gt;apple_ios_simulator
</span></span></code></pre></div><p>命令行方式就介绍这些了，有兴趣的请自行参考https://flutter.io/developing-packages/</p>
<h3 id="2-android-studio">2. Android Studio</h3>
<p>好了，重点来了，这也是我所推荐的方式，通过AS来开发一个Flutter应用。</p>]]></description>
</item>
<item>
    <title>flutter开发系列之一--环境配置</title>
    <link>https://www.ithome.me/post/2018/07/16/flutter%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Mon, 16 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/16/flutter%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[<p>flutter出来已经一段时间，相信有不少开发同学都去尝试了，现在跨平台开发技术火爆移动开发圈，比如RN，Weex等等，但是这些方案如果不是有特殊需求，一般并没有动力去学，flutter不同，google大厂出品，值得信赖。这系列文章主要是用来记录自己学习flutter的一些经验和遇到的问题。</p>
<h3 id="1-准备">1. 准备</h3>
<blockquote>
<p>因我使用的开发环境是Mac系统，因此本系列所有的配置都是Mac为主
由于网络问题，部分用户可能无法打开flutter官网，这里推荐<a href="https://flutter-io.cn/" target="_blank" rel="noopener noreffer">Flutter中文站</a>
</p>
</blockquote>
<p><strong>在开始flutter之前，请先安装好Xcode和Android Studio</strong></p>
<h3 id="2-安装xcode和android-studio">2. 安装Xcode和Android Studio</h3>
<h4 id="21-xcode">2.1 Xcode</h4>
<blockquote>
<p>直接在Mac App Store下载安装Xcode。</p>
</blockquote>
<p>安装完Xcode后还需要安装一些依赖库。而这些库需要通过brew安装。</p>
<ol>
<li>首先安装brew(已经安装过的跳过此步骤)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;
</span></span></code></pre></div><ol start="2">
<li>安装一些依赖库</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">brew update
</span></span><span class="line"><span class="cl">brew install --HEAD libimobiledevice
</span></span><span class="line"><span class="cl">brew install ideviceinstaller ios-deploy cocoapods
</span></span><span class="line"><span class="cl">pod setup
</span></span></code></pr]]></description>
</item>
<item>
    <title>iOS8 Xcode6中Size Classes简单使用教程</title>
    <link>https://www.ithome.me/post/2014/12/15/ios8-xcode6%E4%B8%ADsize-classes%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
    <pubDate>Mon, 15 Dec 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/12/15/ios8-xcode6%E4%B8%ADsize-classes%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
    <description><![CDATA[<p><code>Size classes</code>是iOS8中新特性,有了它可以根据设备屏幕或者旋转状态来自定义app布局,在iOS8之前,开发者需要用多个Storyboards使用不同的UI布局来适配旋转状态及不同的设备。在这篇教程中我们主要看看在Xcode6中如何使用<code>Size Classes</code>来适配。</p>
<p>打开Xcode,新建项目选择Single View Application,Product Name填写<strong>iOS8SizeClassesTutorial</strong>,Organization Name和Organization Identifier根据自己填写,选择<a href="http://www.swiftmi.com/" target="_blank" rel="noopener noreffer">Swift语言</a>
与<code>Universal</code>设备。</p>
<p></p>]]></description>
</item>
<item>
    <title>为iPhone 6设计自适应布局</title>
    <link>https://www.ithome.me/post/2014/12/15/%E4%B8%BAiphone-6%E8%AE%BE%E8%AE%A1%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</link>
    <pubDate>Mon, 15 Dec 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/12/15/%E4%B8%BAiphone-6%E8%AE%BE%E8%AE%A1%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</guid>
    <description><![CDATA[<h1 id="为iphone-6设计自适应布局">为iPhone 6设计自适应布局</h1>
<p>Apple从iOS 6加入了Auto Layout后开始就比较委婉的开始鼓励、建议开发者使用自适应布局，但是到目前为止，我感觉大多数开发者一直在回避这个问题，不管是不是由于历史原因造成的，至少他们在心底还坚守着固定布局的老传统思想。</p>
<p>随着iPhone6、iPhone6 Plus的到来，使用自适应布局更是迫在眉睫的事，固定布局的老传统思想脆弱的不堪一击。现在的iPhone有4种尺寸，如果算上iPad，现在Apple的iOS设备有5种尺寸。我们在准备使用自适应布局设计应用界面之前，可以把这5种尺寸划分为3种分辨率和屏幕方向，这样在设计时分类会更加清晰一些。</p>
<p>我们先来看一张自适应布局的效果图：</p>
<p></p>]]></description>
</item>
<item>
    <title>[转]20个美丽的移动APP界面设计欣赏和APP素材下载</title>
    <link>https://www.ithome.me/post/2014/10/07/%E8%BD%AC20%E4%B8%AA%E7%BE%8E%E4%B8%BD%E7%9A%84%E7%A7%BB%E5%8A%A8app%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E6%AC%A3%E8%B5%8F%E5%92%8Capp%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD/</link>
    <pubDate>Tue, 07 Oct 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/10/07/%E8%BD%AC20%E4%B8%AA%E7%BE%8E%E4%B8%BD%E7%9A%84%E7%A7%BB%E5%8A%A8app%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E6%AC%A3%E8%B5%8F%E5%92%8Capp%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD/</guid>
    <description><![CDATA[<p>如今移动 APP 界面设计师正变得越来越吃香啦，因为我们的生活已经全面智能化了，移动手机上的 APP 层出不穷，所以，APP 设计也随着火起来啦！</p>
<p>现在对 APP 应用程序设计师和开发人员有很高的需求，特别是在用户 UI 界面。用户界面设计以用户体验和互动，同时易于使用的是重要的，一个有吸引力的还是实用的设计是一个应用程序成功的关键。这块的 APP 设计是很重要和精细的设计工作。</p>
<p>下面是 20 个美丽的移动 APP 界面设计欣赏和 APP 素材下载，希望大家喜欢！其中也许一些 APP 设计素材在之前我们报道过，临摹过，不过没关系，我们可以继续来回顾这些优秀的 APP 设计界面欣赏或是 APP 设计素材下载。</p>
<p>1. <strong><a href="http://www.behance.net/gallery/iOS-7-UI-Components/10460735" target="_blank" rel="noopener noreffer">iOS 7 UI Components by GraphicBurger</a>
</strong></p>
<p></p>]]></description>
</item>
<item>
    <title>[转]IOS, xib和storyboard的混用</title>
    <link>https://www.ithome.me/post/2014/08/07/%E8%BD%ACios-xib%E5%92%8Cstoryboard%E7%9A%84%E6%B7%B7%E7%94%A8/</link>
    <pubDate>Thu, 07 Aug 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/08/07/%E8%BD%ACios-xib%E5%92%8Cstoryboard%E7%9A%84%E6%B7%B7%E7%94%A8/</guid>
    <description><![CDATA[<p>1. 从xib的viewcontroll中启动storyboard 或者 从一个storyboard切换到另一个storyboard：</p>
<p>[objc]</p>
<ul>
<li>(IBAction)openStoryboard:(id)sender {<br>
UIStoryboard *secondStoryboard = [UIStoryboard storyboardWithName:@&quot;SecondStoryboard&quot; bundle:nil];<br>
[self presentModalViewController:[secondStoryboard instantiateInitialViewController] animated:YES];<br>
}
[/objc]</li>
</ul>
<p>2. 从storyboard切换到xib：</p>
<p>[objc]
LoginViewController *loginViewController = [[LoginViewController alloc] initWithNibName:@&quot;LoginViewController&quot; bundle:nil];<br>
[/objc]</p>
<p>然后用push或者modal方法启用这个controller</p>
<p>3. 从xib或者storyboard中启动里一个storyboard的某一个controller上：</p>
<p>[objc]
[storyboard instantiateViewControllerWithIdentifier&quot;actionList&quot;];
[/objc]</p>
<p>原文地址：http://blog.csdn.net/lrenjun/article/details/10235687</p>]]></description>
</item>
</channel>
</rss>
