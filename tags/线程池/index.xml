<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>线程池 - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
        <description>线程池 - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Wed, 20 Mar 2013 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/" rel="self" type="application/rss+xml" /><item>
    <title>android实现单个任务依次执行</title>
    <link>https://www.ithome.me/post/2013/03/20/android%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%B8%AA%E4%BB%BB%E5%8A%A1%E4%BE%9D%E6%AC%A1%E6%89%A7%E8%A1%8C/</link>
    <pubDate>Wed, 20 Mar 2013 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2013/03/20/android%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%B8%AA%E4%BB%BB%E5%8A%A1%E4%BE%9D%E6%AC%A1%E6%89%A7%E8%A1%8C/</guid>
    <description><![CDATA[<p>之前有一篇文章介绍了用thread的join()方法来实现，但是我在实际应用过程中发现了一个问题，就是当任务占用时间过长时，会导致<strong>service</strong>的超时，太杯具了，研究了下，发现也许有更好的方法，还没来得及测试，先记录。</p>
<p>使用Java的线程次机制。</p>
<p><strong>java.util.concurrent.ThreadPoolExecutor</strong> 线程池类</p>
<p>我这里用到的方法是newSingleThreadExecutor，这个方法只会创建一个线程，然后所有添加的任务都会用这个线程来顺序执行。代码如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.concurrent.ExecutorService</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.concurrent.Executors</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ThreadPool</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">ExecutorService</span><span class="w"> </span><span class="n">pool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">ExecutorService</span><span class="w"> </span><span class="nf">getSingleThreadPool</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">pool</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">pool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Executors</span><span class="p">.</span><span class="na">newSingleThreadExecutor</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">return</span><span class="w"> </span><span class="n">pool</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pr]]></description>
</item>
</channel>
</rss>
