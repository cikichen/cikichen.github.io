<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>优化 - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/%E4%BC%98%E5%8C%96/</link>
        <description>优化 - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Thu, 30 Oct 2014 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/%E4%BC%98%E5%8C%96/" rel="self" type="application/rss+xml" /><item>
    <title>[转]十大技巧优化Android App性能</title>
    <link>https://www.ithome.me/post/2014/10/30/%E8%BD%AC%E5%8D%81%E5%A4%A7%E6%8A%80%E5%B7%A7%E4%BC%98%E5%8C%96android-app%E6%80%A7%E8%83%BD/</link>
    <pubDate>Thu, 30 Oct 2014 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2014/10/30/%E8%BD%AC%E5%8D%81%E5%A4%A7%E6%8A%80%E5%B7%A7%E4%BC%98%E5%8C%96android-app%E6%80%A7%E8%83%BD/</guid>
    <description><![CDATA[<p>无论锤子还是茄子手机的不断冒出，Android系统的手机市场占有率目前来说还是最大的，因此基于Android开发的App数量也是很庞大的。 那么，如何能开发出更高性能的Android App？相信是软件开发公司以及广大程序员们头疼的一大难题。今天，就给大家提供几个提高Android App性能的技巧。</p>
<p><strong>高效地利用线程</strong></p>
<p><strong>1.在后台取消一些线程中的动作</strong></p>
<p>我们知道App运行过程中所有的操作都默认在主线程（UI线程）中进行的，这样App的响应速度就会受到影响。会导致程序陷入卡顿、死掉甚至会发生系统错误。</p>
<p>为 了加快响应速度，需要把费时的操作（比如网络请求、数据库操作或者复杂的计算）从主线程移动到一个单独的线程中。最高效的方式就是在类这一级完成 这项操作，可以使用AsyncTask或者IntentService来创建后台操作。如果选择使用IntentService，它会在需要的时候启动起 来，然后通过一个工作线程来处理请求（Intent）。</p>
<p>使用IntentService时需要注意以下几点限制：</p>
<ul>
<li>这个类不要给UI传递信息，如果要向用户展示处理结果信息请用Activity；</li>
<li>每次只能处理一个请求；</li>
<li>每一个处理请求过程都不能中断；
<strong>2.保持响应不发生ANR</strong></li>
</ul>
<p>从UI线程中移除费时操作这个方式还可以防止用户操作出现系统不响应（ANR）对话框。需要做的就是继承AsyncTask来创建一个后台工作线程，并实现doInBackground()方法。</p>
<p>还有一种方式就是自己创建一个Thread类或者HandlerThread类。需要注意这样也会使App变慢，因为默认的线程优先级和主线程的优先级是一样的，除非你明确设定线程的优先级。</p>
<p><strong>3.在线程中初始化查询操作</strong></p>
<p>当查询操作正在后台处理时，展示数据也不是即时的，但是你可以使用CursorLoader对象来加快速度，这个操作可以使Activity和用户之间的互动不受影响。</p>
<p>使用这个对象后，你的App会为ContentProvider初始化一个独立的后台线程进行查询，当查询结束后就会给调用查询的Activity返回结果。</p>
<p><strong>4.其它需要注意的方面</strong></p>
<ul>
<li>使用StrictMode来检查UI线程中可能潜在的费时操作；</li>
<li>使用一些特殊的工具如Safe.ijiami、Systrace或者Traceview来寻找在你的应用中的瓶颈；</li>
<li>用进度条向用户展示操作进度；</li>
<li>如果初始化操作很费时，请展示一个欢迎界面。
<strong>优化设备的电池寿命</strong></li>
</ul>
<p>如果应用很费电，请不要责怪用户卸载了你的应用。对于电池使用来说，主要费电情况如下：</p>
<ul>
<li>
<p>更新数据时经常唤醒程序；</p>
</li>
<li>
<p>用EDGE或者3G来传递数据；</p>
</li>
<li>
<p>文本数据转换，进行非JIT正则表达式操作。
<strong>5.优化网络</strong></p>
</li>
<li>
<p>如果没有网络连接，请让你的应用跳过网络操作；只在有网络连接并且无漫游的情况下更新数据；</p>
</li>
<li>
<p>选择兼容的数据格式，把含有文本数据和二进制数据的请求全部转化成二进制数据格式请求；</p>
</li>
<li>
<p>使用高效的转换工具，多考虑使用流式转换工具，少用树形的转换工具；</p>
</li>
<li>
<p>为了更快的用户体验，请减少重复访问服务器的操作；</p>
</li>
<li>
<p>如果可以的话，请使用framework的GZIP库来压缩文本数据以高效使用CPU资源。
<strong>6.优化应用在前端的工作</strong></p>
</li>
<li>
<p>如果考虑使用wakelocks，尽量设置为最小的级别；</p>
</li>
<li>
<p>为了防止潜在的bug导致的电量消耗，请明确指定超时时间；</p>
</li>
<li>
<p>启用 android:keepScreenOn属性；</p>
</li>
<li>
<p>除了系统的GC操作，多考虑手动回收Java对象，比如XmlPullParserFactory和BitmapFactory。还有正则表达式的Matcher.reset(newString)操作、StringBuilder.setLength(0)操作；</p>
</li>
<li>
<p>要注意同步的问题，尽管在主线程中是安全的；</p>
</li>
<li>
<p>在Listview中要多采用重复利用策略；</p>
</li>
<li>
<p>如果允许的话多使用粗略的网络定位而不用GPS，对比一下GPS需要1mAh（25s * 140 mA），而一般网络只用0.1mAh（2s * 180mA）；</p>
</li>
<li>
<p>确保注销GPS的位置更新操作，因为这个更新操作在onPause()中也是会继续的。当所有的应用都注销了这个操作，用户可以在系统设置中重新启用GPS而不浪费电量；</p>
</li>
<li>
<p>请考虑在大量数理运算中使用低精度变量并在用DisplayMetrics进行DPI任务时缓存变量值；
<strong>7.优化工作在前台的应用</strong></p>
</li>
<li>
<p>请确保service生命周期都是短暂的，因为每个进程都需要2MB的内存，而在前台程序需要内存时也会重新启动；</p>
</li>
<li>
<p>保持内存的使用量不要太大；</p>
</li>
<li>
<p>如果要应用每30分钟更新一次，请在设备处于唤醒状态下进行；</p>
</li>
<li>
<p>Service在pull或者sleep状态都是不好的，这就是为什么在服务结束时要使用AlarmManager或者配置属性stopSelf()的原因。
<strong>8.其它注意事项</strong></p>
</li>
<li>
<p>在进行整体更新之前检查电池的状态和网络状态，等待最好的状态在进行大幅度装换操作；</p>
</li>
<li>
<p>让用户看到用电情况，比如更新周期，后台操作的时候；
<strong>实现低内存占用UI</strong></p>
</li>
</ul>
<p><strong>9.找到布局显示问题</strong></p>
<p>当 我们为布局单独创建UI的时候，就是在创建滥用内存的App，它在UI中会出现可恶的延时。要实现一个流畅的、低内存占用的UI，第一步就是搜索 你的应用找出潜在的瓶颈布局。使用Safe.ijiami和Android SDK/tools/中自带的Hierarchy Viewer Tool工具。</p>
<p>还有一个很好的工具就是Lint，它会扫描应用的源码去寻找可能存在的bug，并为控件结果进行优化。</p>]]></description>
</item>
<item>
    <title>MyEclipse9极速优化</title>
    <link>https://www.ithome.me/post/2013/03/19/myeclipse9%E6%9E%81%E9%80%9F%E4%BC%98%E5%8C%96/</link>
    <pubDate>Tue, 19 Mar 2013 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2013/03/19/myeclipse9%E6%9E%81%E9%80%9F%E4%BC%98%E5%8C%96/</guid>
    <description><![CDATA[<p>相信大家在启动MyEclipse的时候都很慢，很烦有没有让他更快更舒服些呢？</p>
<p>现在就介绍一些优化方法，很管用，对电脑配置较低的朋友相信有很大的帮助，希望大家能仔细的看完，并按以下每步设置。</p>
<p>1、去除不需要加载的模块</p>
<p>一个系统20%的功能往往能够满足80%的需求，MyEclipse也不例外，我们在大多数时候只需要20%的系统功能，所以可以将一些不使用的模块禁止 加载启动。通过Windows – Preferences打开配置窗口，依次选择左侧的General – Startup and Shutdown，这个时候在右侧就显示出了Eclipse启动时加载的模块，可以根据自己的实际情况去除一些模块。 windows–&gt;perferences–&gt;general–&gt;startup and shutdown</p>
<p>关掉没用的启动项：</p>
<p>WTP ：一个跟myeclipse差不多的东西，主要差别是 WTP 是免费的，如果使用myeclipse，这个可以取消 Mylyn：组队任务管理工具，类似于 CVS ，以任务为单位管理项目进度，没用到的可以取消 Derby：一种保存成 jar 形式的数据库，我没用到，取消 一大排以 MyEclipse EASIE 打头的启动项：myeclipse 支持的服务器，只选自己用的，其他取消，比如我只选了tomcat6.x</p>
<p>2、取消MyEclipse在启动时自动验证项目配置文件</p>
<p>默认情况下MyEclipse在启动的时候会自动验证每个项目的配置文件，这是一个非常耗时的过程， 可以在Preferences窗口依次选择 MyEclipse Enterprise Workbench – Validation，然后在右侧的Validator列表中只保留 Manual 项就可以了(Manual全部勾选，Bulid项只留下第一项)。 如果需要验证的时候只需要选中文件，然后右键选择 MyEclipse – Run Validation就可以了。</p>
<p>windows–&gt;perferences–&gt;myeclipse–&gt;validation 把 除了manual 下面的全部点掉，build下只留 classpath dependency Validator</p>
<p>手工验证方法：</p>
<p>在要验证的文件上，单击鼠标右键–&gt;myeclipse–&gt;run validation</p>
<p>3、去掉拼写检查（如果你觉的有用可以不去）</p>
<p>拼写检查会给我们带来不少的麻烦，我们的方法命名都会是单词的缩写，他也会提示有错，所以最好去掉，没有多大的用处： windows–&gt;perferences–&gt;general–&gt;validation-&gt;editors-&gt;Text Editors-&gt;spelling</p>
<p>myeclipse 打开 jsp 的默认编辑器不好，会同时打开预览 windows–&gt;perferences–&gt;general–&gt;editors-&gt;file associations,</p>
<p>把默认改成 MyEclipse JSP Editor（） 原默认的jsp编辑器是 MyEclipse Visual JSP Designer，顾名思义，此编译器是jsp可视化编辑器，对于初学者有很多的帮助， 但修改此项的默认编辑器其实可以提高启动速度）</p>]]></description>
</item>
</channel>
</rss>
