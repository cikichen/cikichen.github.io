<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>面试 - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/%E9%9D%A2%E8%AF%95/</link>
        <description>面试 - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Fri, 17 Dec 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/%E9%9D%A2%E8%AF%95/" rel="self" type="application/rss+xml" /><item>
    <title>手摸手极简docker部署rocketmq单机实战</title>
    <link>https://www.ithome.me/post/2021/12/17/docker%E9%83%A8%E7%BD%B2rocketmq%E5%8D%95%E6%9C%BA%E5%AE%9E%E6%88%98/</link>
    <pubDate>Fri, 17 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2021/12/17/docker%E9%83%A8%E7%BD%B2rocketmq%E5%8D%95%E6%9C%BA%E5%AE%9E%E6%88%98/</guid>
    <description><![CDATA[<p>自己本地搭建rocketmq开发环境还是用docker方便点，之前搭建一直有些小问题，最近专项解决了下，终于搞定了，这里整理分享下</p>
<h3 id="环境准备">环境准备</h3>
<blockquote>
<p>因笔者用的MacBook，所以会主要以Mac为主讲解，其他环境区别不大</p>
</blockquote>
<p>首先请准备好docker环境，推荐<a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener noreffer">docker desktop</a>
，无他，点点点就完事了，不用的时候不启动，开发机紧张的内存问题得到了心理上的安慰。</p>
<p>还需要安装好<code>docker-compose</code>，请自行参考安装教程<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreffer">点这里</a>
</p>
<blockquote>
<p>注：<code>docker desktop</code>自带了docker-compose，所以不需要再单独安装compose了</p>
</blockquote>
<h3 id="编译rocketmq镜像">编译rocketmq镜像</h3>
<p>环境搞定了，我们开始搭建rocketmq，直接用官方推荐的docker镜像即可。
镜像下载地址：<a href="https://github.com/apache/rocketmq-docker" target="_blank" rel="noopener noreffer">https://github.com/apache/rocketmq-docker</a>
</p>
<p>我们先通过<code>git</code>把代码拉下来，打开命令行复制粘贴</p>
<p><code>git clone https://hub.fastgit.org/apache/rocketmq-docker.git</code></p>
<p>clone完成后，继续<code>cd rocketmq-docker/image-build</code>到image-build目录下</p>
<p>目前最新版本为<code>4.9.2</code>,我们就以这个版本为例：
继续输入下列指令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sh build-image.sh 4.9.2 alpine
</span></span></code></pre></div><p>等待完成就即可，如果报错，请自行根据错误查找原因。只要环境没问题，编译完成后我们能得到<code>apacherocketmq/rocketmq</code>镜像</p>
<p>至此，我们已经完成了一半的工作。</p>
<h3 id="编写docker-compose配置">编写docker-compose配置</h3>
<blockquote>
<p>鲁迅：授人以鱼不如授人以渔和鱼
有经验的同学此时已经急不可耐了，鱼拿去。
完整的<code>docker-compose.yml</code>文件</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">version: &#39;3&#39;
</span></span><span class="line"><span class="cl">services:
</span></span><span class="line"><span class="cl">  namesrv:
</span></span><span class="line"><span class="cl">    image: apacherocketmq/rocketmq:4.9.2-alpine
</span></span><span class="line"><span class="cl">    container_name: rmqnamesrv
</span></span><span class="line"><span class="cl">    ports:
</span></span><span class="line"><span class="cl">      - 9876:9876
</span></span><span class="line"><span class="cl">    volumes:
</span></span><span class="line"><span class="cl">      - ./data/namesrv/logs:/home/rocketmq/logs
</span></span><span class="line"><span class="cl">    command: sh mqnamesrv
</span></span><span class="line"><span class="cl">    restart: always
</span></span><span class="line"><span class="cl">  broker:
</span></span><span class="line"><span class="cl">    image: apacherocketmq/rocketmq:4.9.2-alpine
</span></span><span class="line"><span class="cl">    container_name: rmqbroker
</span></span><span class="line"><span class="cl">    links:
</span></span><span class="line"><span class="cl">      - namesrv
</span></span><span class="line"><span class="cl">    ports:
</span></span><span class="line"><span class="cl">      - 10909:10909
</span></span><span class="line"><span class="cl">      - 10911:10911
</span></span><span class="line"><span class="cl">      - 10912:10912
</span></span><span class="line"><span class="cl">    environment:
</span></span><span class="line"><span class="cl">      - NAMESRV_ADDR=namesrv:9876
</span></span><span class="line"><span class="cl">    volumes:
</span></span><span class="line"><span class="cl">      - ./data/broker/logs:/home/rocketmq/logs
</span></span><span class="line"><span class="cl">      - ./data/broker/store:/home/rocketmq/store
</span></span><span class="line"><span class="cl">      - ./data/broker/conf/broker.conf:/home/rocketmq/rocketmq-4.9.2/conf/broker.conf
</span></span><span class="line"><span class="cl">      - ./data/broker/runbroker.sh:/home/rocketmq/rocketmq-4.9.2/bin/runbroker.sh
</span></span><span class="line"><span class="cl">    command: sh mqbroker -c /home/rocketmq/rocketmq-4.9.2/conf/broker.conf
</span></span><span class="line"><span class="cl">    depends_on:
</span></span><span class="line"><span class="cl">      - namesrv
</span></span><span class="line"><span class="cl">    restart: always
</span></span><span class="line"><span class="cl">  rmqconsole:
</span></span><span class="line"><span class="cl">    image: candice0630/rocketmq-console-ng:2.0
</span></span><span class="line"><span class="cl">    container_name: rmqconsole
</span></span><span class="line"><span class="cl">    ports:
</span></span><span class="line"><span class="cl">      - 9001:8080
</span></span><span class="line"><span class="cl">    environment:
</span></span><span class="line"><span class="cl">      JAVA_OPTS: -Drocketmq.namesrv.addr=namesrv:9876
</span></span><span class="line"><span class="cl">        -Dcom.rocketmq.sendMessageWithVIPChannel=false
</span></span><span class="line"><span class="cl">    depends_on:
</span></span><span class="line"><span class="cl">      - namesrv
</span></span><span class="line"><span class="cl">    restart: always
</span></span></code></pre></div><p>上面一共三个images，<code>namesrv</code>、<code>broker</code>和<code>rmqconsole</code>
熟悉<code>docker-compose</code>的同学可以直接跳过这部分了
本部分主要结合上面的配置来说，不适应的根据自己的习惯自行更改
先建立一个<code>rocketmq</code>文件夹，然后在文件夹下面创建<code>docker-compose.yml</code>文件，复制上面的内容进去。在<code>docker-compose.yml</code>同级目录下创建<code>data</code>文件夹，在<code>data</code>文件夹下分别创建<code>broker</code>和<code>namesrv</code>文件夹，<code>broker</code>目录下分别创建<code>conf</code>、<code>logs</code>和<code>store</code>文件夹。<code>namesrv</code>目录下创建<code>logs</code>目录，<code>logs</code>目录下创建<code>rocketmqlogs</code>目录，这样所有的目录创建完成。自定义的<code>broker.conf</code>文件放到<code>data/broker/conf</code>目录下。</p>]]></description>
</item>
<item>
    <title>Android高频面试题汇总(一)</title>
    <link>https://www.ithome.me/post/2020/10/21/android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B8%80/</link>
    <pubDate>Wed, 21 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/10/21/android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B8%80/</guid>
    <description><![CDATA[<h3 id="1leakcanary原理">1.Leakcanary原理？</h3>
<ol>
<li>利用 application.registerActivityLifecycleCallbacks(lifecycleCallbacks) 来监听整个生命周期内的 Activity onDestoryed 事件</li>
<li>某个 Activity 被 destory 后，将它传给 RefWatcher 去做观测，确保其后续会被正常回收；</li>
<li>RefWatcher 首先把 Activity 使用 KeyedWeakReference 引用起来，并使用一个 ReferenceQueue 来记录该 KeyedWeakReference 指向的对象是否已被回收；</li>
<li>AndroidWatchExecutor 会在 5s 后，开始检查这个弱引用内的 Activity 是否被正常回收。判断条件是：若 Activity 被正常回收，那么引用它的 KeyedWeakReference 会被自动放入 ReferenceQueue 中。</li>
<li>判断方式是：先看 Activity 对应的 KeyedWeakReference 是否已经放入 ReferenceQueue 中；如果没有，则手动 GC：gcTrigger.runGc();；然后再一次判断 ReferenceQueue 是否已经含有对应的 KeyedWeakReference。若还未被回收，则认为可能发生内存泄漏</li>
</ol>
<h3 id="2如何理解java的多态其中重载和重写有什么区别">2.如何理解Java的多态？其中，重载和重写有什么区别？</h3>
<p>多态是同一个行为具有多个不同表现形式或形态的能力，多态是同一个接口，使用不同的实例而执行不同操作，多态就是程序运行期间才确定，一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法。
多态存在的三个必要条件是：继承，重写，父类引用指向子类引用。
多态的三个实现方式是：重写，接口，抽象类和抽象方法。</p>
<table>
  <thead>
      <tr>
          <th>区别点</th>
          <th>重载</th>
          <th>重写</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>参数列表</td>
          <td>必须修改</td>
          <td>不能修改</td>
      </tr>
      <tr>
          <td>返回类型</td>
          <td>可以修改</td>
          <td>不能修改</td>
      </tr>
      <tr>
          <td>异常</td>
          <td>可以修改</td>
          <td>可以减少或删除，一定不能抛出新的或者更广的异常</td>
      </tr>
      <tr>
          <td>访问</td>
          <td>可以修改</td>
          <td>一定不能做更严格的限制（可以降低限制）</td>
      </tr>
  </tbody>
</table>
<h3 id="3谈一下jvm内存区域划分哪部分是线程公有的哪部分是私有的">3.谈一下JVM内存区域划分？哪部分是线程公有的，哪部分是私有的？</h3>
<p></p>]]></description>
</item>
<item>
    <title>快速理解二十三种设计模式(速记)</title>
    <link>https://www.ithome.me/post/2020/10/21/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 21 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/10/21/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[<h2 id="设计模式六大原则">设计模式六大原则</h2>
<ul>
<li>单一职责原则（Single Responsibility Principle）</li>
<li>里氏替换原则（Liskov Substitution Principle）</li>
<li>依赖倒置原则（Dependence Inversion Principle）</li>
<li>接口隔离原则（Interface Segregation Principle）</li>
<li>迪米特法则（最少知道原则）(Law of Demeter)</li>
<li>合成复用原则（Composite Reuse Principle）</li>
</ul>
<h2 id="设计模式三大类">设计模式三大类</h2>
<ol>
<li>
<p>创建型模式（Creational Pattern）：对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。
（5种）工厂模式、抽象工厂模式、单例模式、建造者模式、原型模式</p>
</li>
<li>
<p>结构型模式（Structural Pattern）：关注于对象的组成以及对象之间的依赖关系，描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。
（7种）适配器模式、装饰者模式、代理模式、外观模式、桥接模式、组合模式、享元模式</p>
</li>
<li>
<p>行为型模式（Behavioral Pattern）：关注于对象的行为问题，是对在不同的对象之间划分责任和算法的抽象化；不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。
（11种）策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p>
</li>
</ol>
<h2 id="简单工厂模式">简单工厂模式</h2>
<p>一个工厂根据不同的参数返回不同的产品</p>
<blockquote>
<p>水果店理解为一个简单工厂，你要苹果，他给你苹果，你要梨子，他就给你梨子。</p>
</blockquote>
<h2 id="工厂模式">工厂模式</h2>
<p>一个工厂创建一个具体的产品，一个产品对应一个工厂类。</p>
<blockquote>
<p>宝马x1一个工厂类，x2一个工厂类，x3一个工厂类，奔驰A级一个工厂类，C级一个工厂类</p>
</blockquote>
<h2 id="抽象工厂模式">抽象工厂模式</h2>
<p>一个工厂创建一类产品，一类产品对应一个工厂。</p>
<blockquote>
<p>比如汽车制造工厂是个抽象工厂，它既可以生产宝马X1，也可以生产X2，X3。罐头厂是一个抽象工厂，它可以生产橘子罐头，也可以生产黄桃罐头。</p>
</blockquote>
<h2 id="单例模式">单例模式</h2>
<p>这个没啥好说的，保证一个类仅有一个实例，并提供一个访问它的全局访问点。
需要记忆的是<code>懒汉式</code>和<code>饿汉式</code>。
懒汉式：需要的时候才实例化，常用的例子就是非空检查和双重检查式的实现。
饿汉式：类加载的时候就先实例化。
类似这样的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">Singleton</span><span class="w"> </span><span class="n">instance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Singleton</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></div><p>饿汉式会线程安全些。
我们用的最主流的方式是静态内部类的方式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">SingleInstance</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kd">private</span><span class="w"> </span><span class="nf">SingleInstance</span><span class="p">(){}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">class</span> <span class="nc">SingleInstanceHolder</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">SingleInstance</span><span class="w"> </span><span class="n">INSTANCE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">SingleInstance</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">SingleInstance</span><span class="w"> </span><span class="nf">getInstance</span><span class="p">(){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">SingleInstanceHolder</span><span class="p">.</span><span class="na">INSTANCE</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>一个省只会有一个省长。</p>]]></description>
</item>
<item>
    <title>Java集合</title>
    <link>https://www.ithome.me/post/2020/04/23/java%E9%9B%86%E5%90%88/</link>
    <pubDate>Thu, 23 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/04/23/java%E9%9B%86%E5%90%88/</guid>
    <description><![CDATA[<p></p>]]></description>
</item>
<item>
    <title>Java常见面试题</title>
    <link>https://www.ithome.me/post/2019/12/05/java%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <pubDate>Thu, 05 Dec 2019 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2019/12/05/java%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
    <description><![CDATA[<blockquote>
<p>作者：SnailClimb
链接：https://juejin.im/post/5dba72c96fb9a02047526331
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="1-面向对象和面向过程的区别">1. 面向对象和面向过程的区别</h2>
<ul>
<li><strong>面向过程</strong> ：<strong>面向过程性能比面向对象高。</strong> 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></li>
<li><strong>面向对象</strong> ：<strong>面向对象易维护、易复用、易扩展。</strong> 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低</strong>。</li>
</ul>
<p>参见 issue :  <a href="https://github.com/Snailclimb/JavaGuide/issues/431" target="_blank" rel="noopener noreffer">面向过程 ：面向过程性能比面向对象高？？</a>
</p>
<blockquote>
<p>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。</p>
<p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</p>
</blockquote>
<h2 id="2-java-语言有哪些特点">2. Java 语言有哪些特点?</h2>
<ol>
<li>简单易学；</li>
<li>面向对象（封装，继承，多态）；</li>
<li>平台无关性（ Java 虚拟机实现平台无关性）；</li>
<li>可靠性；</li>
<li>安全性；</li>
<li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li>
<li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li>
<li>编译与解释并存；</li>
</ol>
<blockquote>
<p>修正（参见： <a href="https://github.com/Snailclimb/JavaGuide/issues/544" target="_blank" rel="noopener noreffer">issue#544</a>
）：C++11开始（2011年的时候）,C++就引入了多线程库，在windows、linux、macos都可以使用<code>std::thread</code>和<code>std::async</code>来创建线程。参考链接：http://www.cplusplus.com/reference/thread/thread/?kw=thread</p>
</blockquote>
<h2 id="3-关于-jvm-jdk-和-jre-最详细通俗的解答">3. 关于 JVM JDK 和 JRE 最详细通俗的解答</h2>
<h3 id="jvm">JVM</h3>
<p>Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p>
<p><strong>什么是字节码?采用字节码的好处是什么?</strong></p>
<blockquote>
<p>在 Java 中，JVM可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。</p>
</blockquote>
<p><strong>Java 程序从源代码到运行一般有下面3步：</strong></p>
<p></p>]]></description>
</item>
</channel>
</rss>
