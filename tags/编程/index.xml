<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>编程 - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/%E7%BC%96%E7%A8%8B/</link>
        <description>编程 - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Fri, 17 Dec 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/%E7%BC%96%E7%A8%8B/" rel="self" type="application/rss+xml" /><item>
    <title>手摸手极简docker部署rocketmq单机实战</title>
    <link>https://www.ithome.me/post/2021/12/17/docker%E9%83%A8%E7%BD%B2rocketmq%E5%8D%95%E6%9C%BA%E5%AE%9E%E6%88%98/</link>
    <pubDate>Fri, 17 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2021/12/17/docker%E9%83%A8%E7%BD%B2rocketmq%E5%8D%95%E6%9C%BA%E5%AE%9E%E6%88%98/</guid>
    <description><![CDATA[<p>自己本地搭建rocketmq开发环境还是用docker方便点，之前搭建一直有些小问题，最近专项解决了下，终于搞定了，这里整理分享下</p>
<h3 id="环境准备">环境准备</h3>
<blockquote>
<p>因笔者用的MacBook，所以会主要以Mac为主讲解，其他环境区别不大</p>
</blockquote>
<p>首先请准备好docker环境，推荐<a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener noreffer">docker desktop</a>
，无他，点点点就完事了，不用的时候不启动，开发机紧张的内存问题得到了心理上的安慰。</p>
<p>还需要安装好<code>docker-compose</code>，请自行参考安装教程<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreffer">点这里</a>
</p>
<blockquote>
<p>注：<code>docker desktop</code>自带了docker-compose，所以不需要再单独安装compose了</p>
</blockquote>
<h3 id="编译rocketmq镜像">编译rocketmq镜像</h3>
<p>环境搞定了，我们开始搭建rocketmq，直接用官方推荐的docker镜像即可。
镜像下载地址：<a href="https://github.com/apache/rocketmq-docker" target="_blank" rel="noopener noreffer">https://github.com/apache/rocketmq-docker</a>
</p>
<p>我们先通过<code>git</code>把代码拉下来，打开命令行复制粘贴</p>
<p><code>git clone https://hub.fastgit.org/apache/rocketmq-docker.git</code></p>
<p>clone完成后，继续<code>cd rocketmq-docker/image-build</code>到image-build目录下</p>
<p>目前最新版本为<code>4.9.2</code>,我们就以这个版本为例：
继续输入下列指令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sh build-image.sh 4.9.2 alpine
</span></span></code></pre></div><p>等待完成就即可，如果报错，请自行根据错误查找原因。只要环境没问题，编译完成后我们能得到<code>apacherocketmq/rocketmq</code>镜像</p>
<p>至此，我们已经完成了一半的工作。</p>
<h3 id="编写docker-compose配置">编写docker-compose配置</h3>
<blockquote>
<p>鲁迅：授人以鱼不如授人以渔和鱼
有经验的同学此时已经急不可耐了，鱼拿去。
完整的<code>docker-compose.yml</code>文件</p>]]></description>
</item>
<item>
    <title>There is an issue with node-fibers</title>
    <link>https://www.ithome.me/post/2021/05/12/m1%E6%97%A0%E6%B3%95%E7%BC%96%E8%AF%91taro%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
    <pubDate>Wed, 12 May 2021 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2021/05/12/m1%E6%97%A0%E6%B3%95%E7%BC%96%E8%AF%91taro%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
    <description><![CDATA[<h3 id="macbook-m1和taro"><code>MacBook M1</code>和<code>taro</code></h3>
<p>在MacBook M1上运行<code>taro</code>项目<code>yarn dev:h5</code>的时候会报下面的错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## There is an issue with `node-fibers` ##
</span></span><span class="line"><span class="cl">`/node_modules/fibers/bin/darwin-arm64-88/fibers.node` is missing.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Try running this to fix the issue: .nvm/versions/node/v15.5.0/bin/node /node_modules/fibers/build
</span></span><span class="line"><span class="cl">Error: Cannot find module &#39;node_modules/fibers/bin/darwin-arm64-88/fibers&#39;
</span></span></code></pre></div><p>找了很久没找到解决方案，知道找个一个类似的问题：https://www.jianshu.com/p/145015d721a5</p>
<h3 id="解决办法">解决办法</h3>
<p>我的环境如下：
node： v15.14.0
taro-cli： v3.2.8</p>
<p>先看错误提示:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## There is an issue with `node-fibers` ##
</span></span><span class="line"><span class="cl">`/node_modules/fibers/bin/darwin-arm64-88/fibers.node` is missing.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Try running this to fix the issue: .nvm/versions/node/v15.14.0/bin/node /node_modules/fibers/build
</span></span><span class="line"><span class="cl">Error: Cannot find module &#39;node_modules/fibers/bin/darwin-arm64-88/fibers&#39;
</span></span></code></pr]]></description>
</item>
<item>
    <title>Android内存泄漏分析</title>
    <link>https://www.ithome.me/post/2020/10/21/android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</link>
    <pubDate>Wed, 21 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/10/21/android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[<h2 id="概述">概述</h2>
<p>Android内存泄漏，也就是我们常说的<code>OOM(out of memory)</code>，<code>OOM</code>的后果大家都知道，严重影响APP的体验，轻则卡顿，重则闪退。而且内存泄漏在低端机上一般都会伴随着<code>ANR</code>，所以一定要重视它。</p>
<p>造成内存泄漏的常见因素有：</p>
<ul>
<li>IO操作</li>
<li>Bitmap</li>
<li>Context
<ul>
<li>单例持有引用</li>
</ul>
</li>
<li>Service
<ul>
<li>BroadcastReceiver</li>
<li>ContentObserver</li>
</ul>
</li>
<li>Handler</li>
<li>Thread</li>
</ul>
<h2 id="分析方法">分析方法</h2>
<p>分析内存泄漏的常用方法：</p>
<ul>
<li>StrictMode， 在<code>Application</code>的<code>onCreate</code>中添加<code>StrictMode</code>代码块</li>
<li>Leakcanary，引用<code>Leakcanary</code>库(<strong>常规手段，仅供参与，不应完全依赖这个库</strong>)</li>
<li>monkey，模拟用户点击操作，检查是否出现泄漏(<strong>推荐</strong>，最有效的方法)</li>
<li>adb命令手动触发<code>adb shell dumpsys meminfo packagename -d</code></li>
<li>Android Studio Memory Profiler，<code>Android Studio</code>自带的分析工具，已经非常好用了</li>
<li>MAT，终极神器，内存分析绕不开的话题(<code>Android Studio</code>搞不定就靠它了)</li>
</ul>
<h2 id="解决方案">解决方案</h2>
<ol>
<li>
<p>Context
如果大家收集过内存泄漏的崩溃日志，会发现大量错误都是由<code>Context</code>和<code>Handler</code>造成。
因为我们开发中会大量用到<code>Context</code>引用，而<code>Context</code>在<code>Application</code>，<code>Activity</code>，<code>Service</code>之类的地方会有自己的实例，而<code>Activity</code>和<code>Service</code>会因为生命周期的原因导致<code>Context</code>实例被回收，如果你继续使用其引用就会因为弱引用问题导致错误出现。
<code>Context</code>的引用也常见于单例模式。
所以建议大家尽可能使用<code>Application</code>的<code>Context</code>。</p>
</li>
<li>
<p>Bitmap
Bitmap的问题一般是因为没有对使用的图片及时释放所致。
图片一般因为体积问题，会导致占用比较多的内存
解决方案：就是在<code>Activity</code>的<code>onDestroy()</code>中及时回收内存。</p>
</li>
<li>
<p>IO操作
FileOutputStream()未关闭，IO流忘记关闭
解决方案：及时关闭IO流，避免泄露</p>]]></description>
</item>
<item>
    <title>Android高频面试题汇总(一)</title>
    <link>https://www.ithome.me/post/2020/10/21/android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B8%80/</link>
    <pubDate>Wed, 21 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/10/21/android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B8%80/</guid>
    <description><![CDATA[<h3 id="1leakcanary原理">1.Leakcanary原理？</h3>
<ol>
<li>利用 application.registerActivityLifecycleCallbacks(lifecycleCallbacks) 来监听整个生命周期内的 Activity onDestoryed 事件</li>
<li>某个 Activity 被 destory 后，将它传给 RefWatcher 去做观测，确保其后续会被正常回收；</li>
<li>RefWatcher 首先把 Activity 使用 KeyedWeakReference 引用起来，并使用一个 ReferenceQueue 来记录该 KeyedWeakReference 指向的对象是否已被回收；</li>
<li>AndroidWatchExecutor 会在 5s 后，开始检查这个弱引用内的 Activity 是否被正常回收。判断条件是：若 Activity 被正常回收，那么引用它的 KeyedWeakReference 会被自动放入 ReferenceQueue 中。</li>
<li>判断方式是：先看 Activity 对应的 KeyedWeakReference 是否已经放入 ReferenceQueue 中；如果没有，则手动 GC：gcTrigger.runGc();；然后再一次判断 ReferenceQueue 是否已经含有对应的 KeyedWeakReference。若还未被回收，则认为可能发生内存泄漏</li>
</ol>
<h3 id="2如何理解java的多态其中重载和重写有什么区别">2.如何理解Java的多态？其中，重载和重写有什么区别？</h3>
<p>多态是同一个行为具有多个不同表现形式或形态的能力，多态是同一个接口，使用不同的实例而执行不同操作，多态就是程序运行期间才确定，一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法。
多态存在的三个必要条件是：继承，重写，父类引用指向子类引用。
多态的三个实现方式是：重写，接口，抽象类和抽象方法。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">区别点</th>
          <th style="text-align: left">重载</th>
          <th style="text-align: left">重写</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">参数列表</td>
          <td style="text-align: left">必须修改</td>
          <td style="text-align: left">不能修改</td>
      </tr>
      <tr>
          <td style="text-align: left">返回类型</td>
          <td style="text-align: left">可以修改</td>
          <td style="text-align: left">不能修改</td>
      </tr>
      <tr>
          <td style="text-align: left">异常</td>
          <td style="text-align: left">可以修改</td>
          <td style="text-align: left">可以减少或删除，一定不能抛出新的或者更广的异常</td>
      </tr>
      <tr>
          <td style="text-align: left">访问</td>
          <td style="text-align: left">可以修改</td>
          <td style="text-align: left">一定不能做更严格的限制（可以降低限制）</td>
      </tr>
  </tbody>
</table>
<h3 id="3谈一下jvm内存区域划分哪部分是线程公有的哪部分是私有的">3.谈一下JVM内存区域划分？哪部分是线程公有的，哪部分是私有的？</h3>
<p></p>]]></description>
</item>
<item>
    <title>快速理解二十三种设计模式(速记)</title>
    <link>https://www.ithome.me/post/2020/10/21/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 21 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/10/21/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[<h2 id="设计模式六大原则">设计模式六大原则</h2>
<ul>
<li>单一职责原则（Single Responsibility Principle）</li>
<li>里氏替换原则（Liskov Substitution Principle）</li>
<li>依赖倒置原则（Dependence Inversion Principle）</li>
<li>接口隔离原则（Interface Segregation Principle）</li>
<li>迪米特法则（最少知道原则）(Law of Demeter)</li>
<li>合成复用原则（Composite Reuse Principle）</li>
</ul>
<h2 id="设计模式三大类">设计模式三大类</h2>
<ol>
<li>
<p>创建型模式（Creational Pattern）：对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。
（5种）工厂模式、抽象工厂模式、单例模式、建造者模式、原型模式</p>
</li>
<li>
<p>结构型模式（Structural Pattern）：关注于对象的组成以及对象之间的依赖关系，描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。
（7种）适配器模式、装饰者模式、代理模式、外观模式、桥接模式、组合模式、享元模式</p>
</li>
<li>
<p>行为型模式（Behavioral Pattern）：关注于对象的行为问题，是对在不同的对象之间划分责任和算法的抽象化；不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。
（11种）策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p>
</li>
</ol>
<h2 id="简单工厂模式">简单工厂模式</h2>
<p>一个工厂根据不同的参数返回不同的产品</p>
<blockquote>
<p>水果店理解为一个简单工厂，你要苹果，他给你苹果，你要梨子，他就给你梨子。</p>
</blockquote>
<h2 id="工厂模式">工厂模式</h2>
<p>一个工厂创建一个具体的产品，一个产品对应一个工厂类。</p>
<blockquote>
<p>宝马x1一个工厂类，x2一个工厂类，x3一个工厂类，奔驰A级一个工厂类，C级一个工厂类</p>
</blockquote>
<h2 id="抽象工厂模式">抽象工厂模式</h2>
<p>一个工厂创建一类产品，一类产品对应一个工厂。</p>
<blockquote>
<p>比如汽车制造工厂是个抽象工厂，它既可以生产宝马X1，也可以生产X2，X3。罐头厂是一个抽象工厂，它可以生产橘子罐头，也可以生产黄桃罐头。</p>
</blockquote>
<h2 id="单例模式">单例模式</h2>
<p>这个没啥好说的，保证一个类仅有一个实例，并提供一个访问它的全局访问点。
需要记忆的是<code>懒汉式</code>和<code>饿汉式</code>。
懒汉式：需要的时候才实例化，常用的例子就是非空检查和双重检查式的实现。
饿汉式：类加载的时候就先实例化。
类似这样的</p>]]></description>
</item>
<item>
    <title>Mac上安装yarn和nvm</title>
    <link>https://www.ithome.me/post/2020/10/19/mac%E4%B8%8A%E5%AE%89%E8%A3%85yarn%E5%92%8Cnvm/</link>
    <pubDate>Mon, 19 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/10/19/mac%E4%B8%8A%E5%AE%89%E8%A3%85yarn%E5%92%8Cnvm/</guid>
    <description><![CDATA[<p><code>Mac</code>上安装<code>yarn</code>最方便的方式就是命令行输入:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">brew install yarn
</span></span></code></pre></div><p>但是这样会把<code>node</code>也一并安装，作为开发者来说，保持多个<code>node</code>版本是必要的，所以我们一般都是通过<code>nvm</code>来管理<code>node</code>版本。</p>
<p><code>brew</code>也提供过<code>brew install yarn --without-node</code>命令，但是现在已经失效。不必再试。</p>
<p>输入<code>brew install</code>，根据提示我们发现目前可用的指令是<code>brew install yarn --ignore-dependencies</code></p>
<p>运行后会报错，提示你找不到<code>node</code>，那么我们是不是可以把<code>nvm</code>的<code>node</code> link 到<code>brew</code>去呢？</p>
<p>答案是可以的，步骤如下(<code>node</code>的版本号改为你实际使用的版本):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">~ which node 
</span></span><span class="line"><span class="cl">/usr/local/opt/nvm/versions/node/v14.14.0/bin/node
</span></span><span class="line"><span class="cl">~ mkdir /usr/local/Cellar/node
</span></span><span class="line"><span class="cl">~ ln -s /usr/local/opt/nvm/versions/node/v14.14.0 /usr/local/Cellar/node
</span></span><span class="line"><span class="cl">~ brew link --overwrite node
</span></span><span class="line"><span class="cl">~ brew doctor
</span></span><span class="line"><span class="cl">~ brew install yarn --ignore-dependencies
</span></span></code></pr]]></description>
</item>
<item>
    <title>Windows Terminal添加右键菜单</title>
    <link>https://www.ithome.me/post/2020/05/02/windows-terminal%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</link>
    <pubDate>Sat, 02 May 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/05/02/windows-terminal%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</guid>
    <description><![CDATA[<p></p>
<h3 id="前言">前言</h3>
<p>关于<code>Windows Terminal</code>的配置，后面有空再讲。</p>
<p>今天要说的是如何实现在当前目录打开<code>Windows Terminal</code>，类似<code>Mac</code>上的<code>Go2Shell</code>效果。</p>
<p> </p>]]></description>
</item>
<item>
    <title>Java集合</title>
    <link>https://www.ithome.me/post/2020/04/23/java%E9%9B%86%E5%90%88/</link>
    <pubDate>Thu, 23 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/04/23/java%E9%9B%86%E5%90%88/</guid>
    <description><![CDATA[<p></p>]]></description>
</item>
<item>
    <title>傻瓜函数式编程</title>
    <link>https://www.ithome.me/post/2019/03/05/%E5%82%BB%E7%93%9C%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/</link>
    <pubDate>Tue, 05 Mar 2019 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2019/03/05/%E5%82%BB%E7%93%9C%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/</guid>
    <description><![CDATA[<blockquote>
<p>文章来自网络</p>
</blockquote>
<h1 id="傻瓜函数式编程">傻瓜函数式编程</h1>
<p>2006年6月19日，星期一</p>
<h3 id="开篇">开篇</h3>
<p>我们这些码农做事都是很拖拉的。每天例行报到后，先来点咖啡，看看邮件还有RSS订阅的文章。然后翻翻新闻还有那些技术网站上的更新，再过一遍编程论坛口水区里那些无聊的论战。最后从头把这些再看一次以免错过什么精彩的内容。然后就可以吃午饭了。饭饱过后，回来盯着IDE发一会呆，再看看邮箱，再去搞杯咖啡。光阴似箭，可以回家了……</p>
<p>（在被众人鄙视之前）我唯一想说的是，在这些拖拉的日子里总会时不时读到一些<a href="http://www.baike.com/wiki/%E4%B8%8D%E6%98%8E%E8%A7%89%E5%8E%89" target="_blank" rel="noopener noreffer">不明觉厉</a>
的文章。如果没有打开不应该打开的网站，每隔几天你都可以看到至少一篇这样的东西。它们的共性：难懂，耗时，于是这些文章就慢慢的堆积成山了。很快你就会发现自己已经累积了一堆的收藏链接还有数不清的PDF文件，此时你只希望隐入一个杳无人烟的深山老林里什么也不做，用一年半载好好的消化这些私藏宝贝。当然，我是说最好每天还是能有人来给送吃的顺带帮忙打扫卫生倒垃圾，哇哈哈。</p>
<p>我不知道你都收藏了些什么，我的阅读清单里面相当大部分都是函数式编程相关的东东：基本上是最难啃的。这些文章充斥着无比枯燥的教科书语言，我想就连那些在华尔街浸淫10年以上的大牛都无法搞懂这些函数式编程（简称FP）文章到底在说什么。你可以去花旗集团或者德意志银行找个项目经理来问问<!-- raw HTML omitted --><a href="#f1" rel="">1</a>
<!-- raw HTML omitted -->：你们为什么要选JMS而不用Erlang？答案基本上是：我认为这个学术用的语言还无法胜任实际应用。可是，现有的一些系统不仅非常复杂还需要满足十分严苛的需求，它们就都是用函数式编程的方法来实现的。这，就说不过去了。</p>
<p>关于FP的文章确实比较难懂，但我不认为一定要搞得那么晦涩。有一些历史原因造成了这种知识断层，可是FP概念本身并不难理解。我希望这篇文章可以成为一个“FP入门指南”，帮助你从<a href="http://zh.wikipedia.org/zh/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B" target="_blank" rel="noopener noreffer">指令式编程</a>
走向<a href="http://zh.wikipedia.org/zh/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80" target="_blank" rel="noopener noreffer">函数式编程</a>
。先来点咖啡，然后继续读下去。很快你对FP的理解就会让同事们刮目相看了。</p>
<p>什么是函数式编程（Functional Programming，FP）？它从何而来？可以吃吗？倘若它真的像那些鼓吹FP的人说的那么好，为什么实际应用中那么少见？为什么只有那些在读博士的家伙想要用它？而最重要的是，它母亲的怎么就那么难学？那些所谓的closure、continuation，currying，lazy evaluation还有no side effects都是什么东东（译者：本着保留专用术语的原则，此处及下文类似情形均不译）？如果没有那些大学教授的帮忙怎样把它应用到实际工程里去？为什么它和我们熟悉的万能而神圣的指令式编程那么的不一样？</p>
<p>我们很快就会解开这些谜团。刚才我说过实际工程和学术界之间的知识断层是有其历史原因的，那么就先让我来解释一下这个问题。答案，就在接下来的一次公园漫步中：</p>
<h3 id="公园漫步">公园漫步</h3>
<p>时间机器启动……我们来到公元前380年，也就是2000多年前的雅典城外。这是一个阳光明媚的久违的春天，<a href="http://zh.wikipedia.org/zh/%E6%9F%8F%E6%8B%89%E5%9B%BE" target="_blank" rel="noopener noreffer">柏拉图</a>
和一个帅气的小男仆走在一片橄榄树荫下。他们正准备前往一个学院。天气很好，吃得很饱，渐渐的，两人的谈话转向了哲学。</p>
<p>“你看那两个学生，哪一个更高一些？”，柏拉图小心的选择用字，以便让这个问题更好的引导眼前的这个小男孩。  <br>
小男仆望向水池旁边的两个男生，“他们差不多一样高。”。  <br>
“‘差不多一样高’是什么意思？”柏拉图问。 <br>
“嗯……从这里看来他们是一样高的，但是如果走近一点我肯定能看出差别来。”  <br>
柏拉图笑了。他知道这个小孩已经朝他引导的方向走了。“这么说来你的意思是世界上没有什么东西是完全相同的咯？”  <br>
思考了一会，小男孩回答：“是的。万物之间都至少有一丁点差别，哪怕我们无法分辨出来。” <br>
说到点子上了！“那你说，如果世界上没有什么东西是完全相等的，你怎么理解‘完全相等’这个概念？”  <br>
小男仆看起来很困惑。“这我就不知道了。”</p>]]></description>
</item>
</channel>
</rss>
