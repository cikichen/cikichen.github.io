<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Flutter - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/flutter/</link>
        <description>Flutter - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Thu, 31 Dec 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/flutter/" rel="self" type="application/rss+xml" /><item>
    <title>MacBook M1开发Flutter遇到的问题</title>
    <link>https://www.ithome.me/post/2020/12/31/macbook-m1%E5%BC%80%E5%8F%91flutter%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
    <pubDate>Thu, 31 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/12/31/macbook-m1%E5%BC%80%E5%8F%91flutter%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[<h3 id="前言">前言</h3>
<p>前一台MacBook已经战了6年，去年准备换16寸，因为各种原因一直等到了今年，又因为得知ARM架构的MacBook要上了，等等党永不为奴，终于等到了它。</p>
<p>我买的是MacBook Pro M1 16+512的配置，用了几天觉得等M2才是真香，M1离真香还差点意思，尤其是系统bug，太致命，开发工具目前原生适配的也不多，用起来提升没那么明显。</p>
<h3 id="搭建flutter环境">搭建flutter环境</h3>
<p>这个不细说，官网已经很详细了：https://flutterchina.club/setup-macos/</p>
<h3 id="m1开发flutter靠谱吗">M1开发Flutter靠谱吗？</h3>
<p>整体还行，但是目前来说，因为适配的问题，想模拟器运行都要调试一番，iPhone和Android都是。不过<strong>M1可以直接把自己的<code>udid</code>注册到开发者账号中去，原生直接运行iPhone App</strong>，这个确实骚，但是为什么我的MacBook注册后设备类型是<code>ipod</code>?
</p>
<p>目前M1上iphone模拟器运行flutter app可能遇到一些问题，主要是三方依赖的插件很多没适配arm64，需要大量调试（参考:https://stackoverflow.com/questions/63607158/xcode-12-building-for-ios-simulator-but-linking-in-object-file-built-for-ios） <br>
android模拟器只有个测试版，问题一大堆，也基本不可用，所以现在这个阶段想在M1上开发app的话，调试需要真机走起。(模拟器查看：https://androidstudio.googleblog.com/2020/12/android-emulator-apple-silicon-preview.html)</p>
<p>偶尔会有一些无法理解的错误，命令行<code>flutter clean</code>可能有惊喜。</p>
<h3 id="常见错误">常见错误</h3>
<h4 id="webview_plugin-flutterflutterh-file-not-found">webview_plugin &lsquo;Flutter/Flutter.h&rsquo; file not found</h4>
<p>旧项目迁移到M1上后，可能会出现这个错误
解决方案:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ rm ios/Flutter/Flutter.podspec
</span></span><span class="line"><span class="cl">$ flutter clean
</span></span></code></pre></div><h4 id="vm-service-error-unhandled-exception">vm-service: Error: Unhandled exception</h4>
<p>运行时报这个错，应该是你在运行小猫咪
解决方案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="k">export</span> <span class="n">NO_PROXY</span><span class="o">=</span><span class="n">localhost</span><span class="p">,</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span>
</span></span><span class="line"><span class="cl"><span class="n">source</span> <span class="o">~/.</span><span class="n">zshrc</span>
</span></span></code></pre></div>]]></description>
</item>
<item>
    <title>Flutter、JetPack Compose和SwiftUI对比</title>
    <link>https://www.ithome.me/post/2020/11/04/flutterjetpack-composeswiftui%E5%AF%B9%E6%AF%94/</link>
    <pubDate>Wed, 04 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/11/04/flutterjetpack-composeswiftui%E5%AF%B9%E6%AF%94/</guid>
    <description><![CDATA[<p>从目前技术的发展来看，通过声明式API来构建UI将会成为主流。</p>
<table>
  <thead>
      <tr>
          <th>框架</th>
          <th>Flutter</th>
          <th>JetPack Compose</th>
          <th>SwiftUI</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>支持平台</td>
          <td>Android、iOS、Web、Desktop</td>
          <td>Android</td>
          <td>iOS、MacOS、iPadOS</td>
      </tr>
      <tr>
          <td>开发语言</td>
          <td>dart</td>
          <td>kotlin</td>
          <td>swift</td>
      </tr>
      <tr>
          <td>性能</td>
          <td>好</td>
          <td>优</td>
          <td>优</td>
      </tr>
      <tr>
          <td>优点</td>
          <td>跨平台</td>
          <td>原生，简化UI构建</td>
          <td>原生，简化UI构建</td>
      </tr>
      <tr>
          <td>缺点</td>
          <td>性能相比原生稍差，跨多平台目前还不完善，UI嵌套深</td>
          <td>不支持跨平台，Android的UI构建包</td>
          <td>仅支持Apple自家的跨平台，iOS的UI构建包，缺乏竞争力</td>
      </tr>
  </tbody>
</table>
<h3 id="1-如何选择">1. 如何选择？</h3>
<p>这问题是个悖论，因为这三个东西完全不一样，面向的场景和未来也不一样。</p>
<h5 id="flutter">flutter</h5>
<p>跨平台，使用自己的skia引起渲染，支持移动端(android、iOS)、web、桌面应用程序。
所有的跨平台框架都绕不开目标平台，所以flutter想使用它来做跨平台开发，你得懂一些Android知识，iOS知识，h5知识。尤其在项目越来越复杂的情况下，和目标平台的耦合越来越深，导致后期还得进行相当一部分的原生开发。
但是跨平台是趋势，从iOS和Android出现的时候跨平台问题就开始探讨了，flutter用于快速出前期产品非常有效，学会它毫无疑问会提升自己的竞争力。</p>
<h5 id="jetpack-compose">JetPack Compose</h5>
<p>Android UI工具包，只能用于AndroidUI构建，未来发展如何不知道，开发方式类似flutter，可以大幅度简化原来Android UI的构建方式，短时间应该不会完全普及，有闲暇与兴趣的可以去学学。</p>
<h5 id="swiftui">SwiftUI</h5>
<p>Apple未来的UI统一方案，能用于Apple全家桶的UI构建，以Apple的号召力，应该会大力推动它普及，iOS开发都应该去学。</p>
<h3 id="2-代码对比">2. 代码对比</h3>]]></description>
</item>
<item>
    <title>Flutter开发App常见问题解决方案</title>
    <link>https://www.ithome.me/post/2019/12/13/flutter%E5%BC%80%E5%8F%91app%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
    <pubDate>Fri, 13 Dec 2019 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2019/12/13/flutter%E5%BC%80%E5%8F%91app%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
    <description><![CDATA[<p>Flutter开发真的会遇到各种各样的坑爹问题，Android运行起来了可能发现iOS出问题了。遇到过不少问题，因此写这个文章做个汇总，也免得以后遇到了再次翻车。</p>
<p>当成FAQ使用吧</p>
<p>Q: [!] The &lsquo;Pods-Runner&rsquo; target has transitive dependencies that include statically linked binaries:
A： 这种问题一般都是<code>ios/Podfile</code>中的<code>use_frameworks!</code>造成的，注释掉它。</p>
<p>Q: Flutter中如何引用库工程？
A: 我在18年尝试过各种办法，真的无解，还是老实的传到<code>jcenter</code>和<code>cocoapods</code>上去。</p>]]></description>
</item>
<item>
    <title>flutter命令行出现startup lock</title>
    <link>https://www.ithome.me/post/2019/09/09/flutter%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%87%BA%E7%8E%B0startup-lock/</link>
    <pubDate>Mon, 09 Sep 2019 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2019/09/09/flutter%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%87%BA%E7%8E%B0startup-lock/</guid>
    <description><![CDATA[<p>有时候执行flutter命令会出现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Waiting for another flutter command to release the startup lock...
</span></span></code></pre></div><p>这是因为前一次的命令没有正常结束。</p>
<p>解决方案很简单：</p>
<p>去目录<code>flutter/bin/cache/lockfile</code> 删除<code>lockfile</code>文件，然后重新执行命令即可。</p>]]></description>
</item>
<item>
    <title>重磅！Flutter 1.0 正式发布！</title>
    <link>https://www.ithome.me/post/2018/12/05/%E9%87%8D%E7%A3%85flutter-1-0-%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/</link>
    <pubDate>Wed, 05 Dec 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/12/05/%E9%87%8D%E7%A3%85flutter-1-0-%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/</guid>
    <description><![CDATA[<p>Flutter Live 2018 上，Google 宣布 Flutter 1.0 正式发布。这是谷歌首个稳定发布的用于为 iOS 和 Android 创建优美的原生体验的 UI 工具包。</p>
<p>当今跨平台移动开发充满了妥协。 开发者不得不在两种情况下做出选择: 要么为多个操作系统多次开发同一个应用程序，要么接受一个以牺牲性能换取跨端能力的解决方案。 有了Flutter之后，我们相信我们有了一个两全其美的解决方案: 图形和UI的硬件加速，由本地 ARM 代码驱动，针对两种流行的移动操作系统。</p>
<p>并不是用来取代传统的苹果和安卓手机应用程序模式; 相反，它是一个应用程序引擎，你可以嵌入到一个现有的应用程序或者开发一个全新的应用程序。</p>
<p></p>
<p>使用 Flare 构建的动画可以作为一个小部件嵌入到现有的 Flutter 应用程序中
</p>
<p>自从第一个测试版发布以来，我们一直在努力为 Flutter 增加新的功能和亮点。 特别是，我们完善了<a href="https://developers.googleblog.com/2018/09/flutter-release-preview-2-pixel-perfect.html" target="_blank" rel="noopener noreffer">pixel-perfect iOS apps</a>
 iOS widgets支持; 添加了对近二十种不同 Firebase 服务的支持; 并致力于提高性能和减少 Flutter 应用程序的大小。 根据社区的反馈，我们也解决了数以千计的问题。</p>
<p>下面是Flutter 1.0的新特性：</p>
<ol>
<li>1.0版本的主要焦点是 bug 修复和稳定性。Flutter 1.0 使用的是最新的 Dart 2.1。Dart 2.1 提供更小的代码体积，更快的类型检查和更好的诊断。按照 Google 的说法，Dart 2.1 将输出代码的大小减少了 17％，并将编译时间缩短了 15％ 。Dart 2.1 还包含新的语言特性，例如通过新mixin关键字改进 mixin 支持、支持 int-to-double 的转换、编译时类型检查、新的 HTTP 状态码等等。</li>
<li>Add to App 是一种逐步将现有应用移植到 Flutter 的方法，主要用于将 Flutter 用于现有应用，或者将现有应用分阶段转换为 Flutter 。</li>
<li>platform views 则是一种相反的方式，用于将 Android 或 iPhone 平台的控件嵌入到 Flutter 应用。
可以把原生的视图控件嵌入到flutter app了
</li>
</ol>
<p>Google 还宣布了 Flutter 运行时基于 Web 的实验性实现 —— <a href="https://medium.com/flutter-io/hummingbird-building-flutter-for-the-web-e687c2a023a8" target="_blank" rel="noopener noreffer">Hummingbird</a>
，旨在将 Flutter 应用引入浏览器。它利用 Dart 平台的特性不仅可以编译原生 ARM 代码，还可以编译 JavaScript 。这使得 Flutter 代码可以在基于标准的 Web 上运行而无需任何更改。</p>]]></description>
</item>
<item>
    <title>flutter插件上传pub.dartlang失败的解决方案</title>
    <link>https://www.ithome.me/post/2018/09/18/flutter%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%BC%A0pub-dartlang%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
    <pubDate>Tue, 18 Sep 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/09/18/flutter%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%BC%A0pub-dartlang%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
    <description><![CDATA[<p>最近开发了一款<code>flutter</code>的插件，想发布到<code>pub.darlang</code>上面去，然后发现命令行各种失败，设置了ss全局|-代|理，命令行export代|理,全都不行，账号验证完毕后，提示上传完成，但是最后一步总是失败。后来无意中发现一次上传过程中出现的地址是<code>flutter-io.cn</code>，我猜测会不会是因为设置了镜像的原因。<strong>果断在.zshrc中去掉了镜像地址设置，然后再试，一次成功，完美解决。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="c1"># 注释掉这两句</span>
</span></span><span class="line"><span class="cl"><span class="c1"># export PUB_HOSTED_URL=https://pub.flutter-io.cn</span>
</span></span><span class="line"><span class="cl"><span class="c1"># export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span>
</span></span></code></pre></div><p>如果有其他同学遇到类似问题，可以试试去掉镜像再试试。</p>]]></description>
</item>
<item>
    <title>flutter实用技巧汇总</title>
    <link>https://www.ithome.me/post/2018/08/28/flutter%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/</link>
    <pubDate>Tue, 28 Aug 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/08/28/flutter%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/</guid>
    <description><![CDATA[<p><strong>bottomNavigationBar TabBar Navigator等</strong>
使用这些控件时，可能出现跳转后bottomNavigationBar还保留在底部的情况。
截止本文发布为止，目前Flutter开发工具还是有一些莫名其妙的问题的。如果你一直用iOS模拟器调试，发现有些奇葩问题怎么改代码都没效果，不妨切换成android模拟器试试，反之亦然。</p>
<p><strong>获取设备宽高</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">double width = MediaQuery.of(context).size.width;
</span></span><span class="line"><span class="cl">double height = MediaQuery.of(context).size.height;
</span></span></code></pre></div><p><strong>标题栏沉浸式</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">void main() {
</span></span><span class="line"><span class="cl">  runApp(App());
</span></span><span class="line"><span class="cl">  if (Platform.isAndroid) {
</span></span><span class="line"><span class="cl">    SystemUiOverlayStyle systemUiOverlayStyle = SystemUiOverlayStyle(statusBarColor: Colors.transparent);
</span></span><span class="line"><span class="cl">    SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><p><strong>AppBar标题居中和去掉AppBar下侧阴影</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Widget _tabbar(BuildContext context) {
</span></span><span class="line"><span class="cl">    return AppBar(
</span></span><span class="line"><span class="cl">      ...
</span></span><span class="line"><span class="cl">      centerTitle: true, // 标题居中
</span></span><span class="line"><span class="cl">      elevation: 0.0, // 去掉appbar下面的阴影
</span></span><span class="line"><span class="cl">    );
</span></span><span class="line"><span class="cl">  }
</span></span></code></pre></div><p><strong>有状态组件一定要使用createState</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="k">class</span> <span class="n">HomeScreen</span> <span class="k">extends</span> <span class="n">StatefulWidget</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">HomeScreen</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">override</span>
</span></span><span class="line"><span class="cl">  <span class="n">_HomeScreenState</span> <span class="n">createState</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="n">_HomeScreenState</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="n">_HomeScreenState</span> <span class="k">extends</span> <span class="n">State</span><span class="o">&lt;</span><span class="n">HomeScreen</span><span class="o">&gt;</span> <span class="n">with</span> <span class="n">SingleTickerProviderStateMixin</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">//</span> <span class="err">使用</span><span class="n">TickerProvider</span> <span class="err">记得加</span> <span class="n">with</span> <span class="n">SingleTickerProviderStateMixin</span> <span class="err">不然会报错</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><strong>使用ios的动画交互 和 MaterialApp 主题颜色配置不生效的问题</strong>
检查是否存在子级MaterialApp。如果有子级MaterialApp请删除，保证全局只有一个MaterialApp，theme就会生效</p>]]></description>
</item>
<item>
    <title>flutter开发系列之二--第一个应用</title>
    <link>https://www.ithome.me/post/2018/07/18/flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</link>
    <pubDate>Wed, 18 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/18/flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</guid>
    <description><![CDATA[<p>好了，我们已经配置好环境变量。现在开始我们的第一个Flutter应用。</p>
<p>Flutter项目可以通过命令行创建，也可以用IDE创建。</p>
<h3 id="1-命令行方式创建flutter项目">1. 命令行方式创建Flutter项目</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter create myapp
</span></span><span class="line"><span class="cl">cd myapp
</span></span></code></pre></div><p>也可以指定pkg/bundleid</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter create --org com.example --template=app myapp
</span></span><span class="line"><span class="cl">cd myapp
</span></span></code></pre></div><p>然后，如果当前有模拟器运行，直接<code>flutter run</code>，否者安装下面的命令运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">flutter emulators //列出可用的模拟器
</span></span><span class="line"><span class="cl">flutter emulators --launch &lt;emulator id&gt; //启动模拟器 emulator id=&gt;apple_ios_simulator
</span></span></code></pre></div><p>命令行方式就介绍这些了，有兴趣的请自行参考https://flutter.io/developing-packages/</p>
<h3 id="2-android-studio">2. Android Studio</h3>
<p>好了，重点来了，这也是我所推荐的方式，通过AS来开发一个Flutter应用。</p>
<p>请跟着步骤来吧。</p>
<p>打开AS，启动到导航页，选择<code>Start a new Flutter project</code>
</p>
<p>第二步，选择<code>Flutter Application</code>，然后<code>Next</code>
</p>
<p>第三步，填写项目信息，继续<code>Next</code>
</p>
<p>第四步，填写包名/bundle id，<code>Finish</code>
</p>]]></description>
</item>
<item>
    <title>flutter开发系列之一--环境配置</title>
    <link>https://www.ithome.me/post/2018/07/16/flutter%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Mon, 16 Jul 2018 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2018/07/16/flutter%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[<p>flutter出来已经一段时间，相信有不少开发同学都去尝试了，现在跨平台开发技术火爆移动开发圈，比如RN，Weex等等，但是这些方案如果不是有特殊需求，一般并没有动力去学，flutter不同，google大厂出品，值得信赖。这系列文章主要是用来记录自己学习flutter的一些经验和遇到的问题。</p>
<h3 id="1-准备">1. 准备</h3>
<blockquote>
<p>因我使用的开发环境是Mac系统，因此本系列所有的配置都是Mac为主
由于网络问题，部分用户可能无法打开flutter官网，这里推荐<a href="https://flutter-io.cn/" target="_blank" rel="noopener noreffer">Flutter中文站</a>
</p>
</blockquote>
<p><strong>在开始flutter之前，请先安装好Xcode和Android Studio</strong></p>
<h3 id="2-安装xcode和android-studio">2. 安装Xcode和Android Studio</h3>
<h4 id="21-xcode">2.1 Xcode</h4>
<blockquote>
<p>直接在Mac App Store下载安装Xcode。</p>
</blockquote>
<p>安装完Xcode后还需要安装一些依赖库。而这些库需要通过brew安装。</p>
<ol>
<li>首先安装brew(已经安装过的跳过此步骤)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;
</span></span></code></pre></div><ol start="2">
<li>安装一些依赖库</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">brew update
</span></span><span class="line"><span class="cl">brew install --HEAD libimobiledevice
</span></span><span class="line"><span class="cl">brew install ideviceinstaller ios-deploy cocoapods
</span></span><span class="line"><span class="cl">pod setup
</span></span></code></pre></div><ol start="3">
<li>命令行启动模拟器</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">open -a Simulator  //打开默认模拟器
</span></span></code></pre></div><p>或者也可以打开指定的模拟器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">xcrun instruments -s //列出你安装的所有可用的设备
</span></span><span class="line"><span class="cl">xcrun instruments -w &#34;iPhone X&#34; //打开指定模拟器
</span></span></code></pre></div><h4 id="22-android-studio">2.2 Android Studio</h4>
<blockquote>
<p>温馨提示，这些步骤可能因为国内网络问题导致不成功，请自行解决访问国外网络的问题。</p>
</blockquote>
<ol>
<li>
<p>下载并安装<a href="https://developer.android.com/studio/" target="_blank" rel="noopener noreffer">Android Studio</a>
</p>
</li>
<li>
<p>启动AS，根据配置向导一步步安装即可。</p>
</li>
<li>
<p>因Flutter默认使用的Android API 27和buildtools 27.0.3。而AS默认安装的最新版。所以这两个东西需要我们自己手动安装。按照下图打开SDK Manager。</p>
</li>
</ol>
<p></p>]]></description>
</item>
</channel>
</rss>
