<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>代理 - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/%E4%BB%A3%E7%90%86/</link>
        <description>代理 - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Wed, 17 Jul 2013 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/%E4%BB%A3%E7%90%86/" rel="self" type="application/rss+xml" /><item>
    <title>[转]Android通过代理使用新API</title>
    <link>https://www.ithome.me/post/2013/07/17/%E8%BD%AC%E9%80%9A%E8%BF%87%E4%BB%A3%E7%90%86%E4%BD%BF%E7%94%A8%E6%96%B0api/</link>
    <pubDate>Wed, 17 Jul 2013 00:00:00 &#43;0000</pubDate>
    <author>SimonChen</author>
    <guid>https://www.ithome.me/post/2013/07/17/%E8%BD%AC%E9%80%9A%E8%BF%87%E4%BB%A3%E7%90%86%E4%BD%BF%E7%94%A8%E6%96%B0api/</guid>
    <description><![CDATA[<h2 id="课程内容">课程内容</h2>
<ol>
<li>使用新API实现Tabs</li>
<li>Implement CompatTabHoneycomb</li>
<li>Implement TabHelperHoneycomb</li>
</ol>
<h2 id="您还应该阅读">您还应该阅读</h2>
<ul>
<li><a href="http://developer.android.com/guide/topics/ui/actionbar.html" target="_blank" rel="noopener noreffer">Action Bar</a>
</li>
<li><a href="http://developer.android.com/guide/topics/ui/actionbar.html#Tabs" target="_blank" rel="noopener noreffer">Action Bar Tabs</a>
</li>
</ul>
<h2 id="动手试试">动手试试</h2>
<p>下载示例代码<br>
<a href="http://developer.android.com/shareables/training/TabCompat.zip" target="_blank" rel="noopener noreffer">TabCompat.zip</a>
</p>
<p>这节课程将演示如何使用新的API来实现<strong>CompatTab</strong>和** TabHelper** 。该实现可以在支持新特性的系统上运行。</p>
<h2 id="使用新api实现tabs">使用新API实现Tabs</h2>
<p>通过_proxy代理_的方式来实现<strong>CompatTab</strong> 和 <strong>TabHelper</strong> 类。由于抽象的API和新的API是一样的，所以只要通过代理把对这些方法的调用委托给新的API即可。</p>
<p>在具体实现中您可以直接使用新的API，由于这些具体的实现类是延时加载的，所以当运行在旧的设备上时不会导致程序Crash。只要您不在3.0之前的系统上调用Honeycomb相关的具体实现，则 Dalvik VM 就不会
抛出 <code>[VerifyError](http://developer.android.com/reference/java/lang/VerifyError.html)</code> 异常。</p>
<p>好的命名策略就是使用具体的版本号对应的名称来命名，这样方便以后管理。由于这里的实现是基于3.0新功能的，所以我们的实现类名字就为<strong>CompatTabHoneycomb</strong> 和 <strong>TabHelperHoneycomb</strong> 。</p>
<p><a href="http://www.ithome.me/wp-content/uploads/2013/07/backward-compatible-ui-classes-honeycomb.png" target="_blank" rel="noopener noreffer"></a>
</p>
<h2 id="implement-compattabhoneycomb">Implement CompatTabHoneycomb</h2>
<p>CompatTabHoneycomb 实现了 CompatTab 抽象类，该类的实现中只是把每个函数的调用委托给
ActionBar.Tab对象，该对象从Activity中获取。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">CompatTabHoneycomb</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">CompatTab</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// The native tab object that this CompatTab acts as a proxy for.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ActionBar</span><span class="p">.</span><span class="na">Tab</span><span class="w"> </span><span class="n">mTab</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">protected</span><span class="w"> </span><span class="nf">CompatTabHoneycomb</span><span class="p">(</span><span class="n">FragmentActivity</span><span class="w"> </span><span class="n">activity</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">tag</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Proxy to new ActionBar.newTab API</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mTab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">activity</span><span class="p">.</span><span class="na">getActionBar</span><span class="p">().</span><span class="na">newTab</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">CompatTab</span><span class="w"> </span><span class="nf">setText</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">resId</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Proxy to new ActionBar.Tab.setText API</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">mTab</span><span class="p">.</span><span class="na">setText</span><span class="p">(</span><span class="n">resId</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="k">this</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Do the same for other properties (icon, callback, etc.)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="implement-tabhelperhoneycomb">Implement TabHelperHoneycomb</h2>
<p>同样，TabHelperHoneycomb实现了TabHelper 抽象类。 函数的调用都委托给ActionBar对应的函数了。</p>]]></description>
</item>
</channel>
</rss>
