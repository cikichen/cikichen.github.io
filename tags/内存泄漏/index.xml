<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>内存泄漏 - Tag - 编程心语</title>
        <link>https://www.ithome.me/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link>
        <description>内存泄漏 - Tag - 编程心语</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>©{year}, All Rights Reserved. Simon Chen</copyright><lastBuildDate>Wed, 21 Oct 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.ithome.me/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>Android内存泄漏分析</title>
    <link>https://www.ithome.me/post/2020/10/21/android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</link>
    <pubDate>Wed, 21 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Simon</author>
    <guid>https://www.ithome.me/post/2020/10/21/android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[<h2 id="概述">概述</h2>
<p>Android内存泄漏，也就是我们常说的<code>OOM(out of memory)</code>，<code>OOM</code>的后果大家都知道，严重影响APP的体验，轻则卡顿，重则闪退。而且内存泄漏在低端机上一般都会伴随着<code>ANR</code>，所以一定要重视它。</p>
<p>造成内存泄漏的常见因素有：</p>
<ul>
<li>IO操作</li>
<li>Bitmap</li>
<li>Context
<ul>
<li>单例持有引用</li>
</ul>
</li>
<li>Service
<ul>
<li>BroadcastReceiver</li>
<li>ContentObserver</li>
</ul>
</li>
<li>Handler</li>
<li>Thread</li>
</ul>
<h2 id="分析方法">分析方法</h2>
<p>分析内存泄漏的常用方法：</p>
<ul>
<li>StrictMode， 在<code>Application</code>的<code>onCreate</code>中添加<code>StrictMode</code>代码块</li>
<li>Leakcanary，引用<code>Leakcanary</code>库(<strong>常规手段，仅供参与，不应完全依赖这个库</strong>)</li>
<li>monkey，模拟用户点击操作，检查是否出现泄漏(<strong>推荐</strong>，最有效的方法)</li>
<li>adb命令手动触发<code>adb shell dumpsys meminfo packagename -d</code></li>
<li>Android Studio Memory Profiler，<code>Android Studio</code>自带的分析工具，已经非常好用了</li>
<li>MAT，终极神器，内存分析绕不开的话题(<code>Android Studio</code>搞不定就靠它了)</li>
</ul>
<h2 id="解决方案">解决方案</h2>
<ol>
<li>
<p>Context
如果大家收集过内存泄漏的崩溃日志，会发现大量错误都是由<code>Context</code>和<code>Handler</code>造成。
因为我们开发中会大量用到<code>Context</code>引用，而<code>Context</code>在<code>Application</code>，<code>Activity</code>，<code>Service</code>之类的地方会有自己的实例，而<code>Activity</code>和<code>Service</code>会因为生命周期的原因导致<code>Context</code>实例被回收，如果你继续使用其引用就会因为弱引用问题导致错误出现。
<code>Context</code>的引用也常见于单例模式。
所以建议大家尽可能使用<code>Application</code>的<code>Context</code>。</p>
</li>
<li>
<p>Bitmap
Bitmap的问题一般是因为没有对使用的图片及时释放所致。
图片一般因为体积问题，会导致占用比较多的内存
解决方案：就是在<code>Activity</code>的<code>onDestroy()</code>中及时回收内存。</p>
</li>
<li>
<p>IO操作
FileOutputStream()未关闭，IO流忘记关闭
解决方案：及时关闭IO流，避免泄露</p>
</li>
<li>
<p>Handler泄漏
由于Activity已经关闭，Handler任务还未执行完成，其引用了Activity的实例导致内存泄露
解决方案：在Activity的onDestroy()方法回收Handler</p>
</li>
<li>
<p>异步线程泄露
一般发生在线程执行耗时操作时，如下载，此时Activity关闭后，由于其被异步线程引用，导致无法被正常回收，从而内存泄露
解决方案：把线程作为对象提取出来，在Activity的onDestroy()方法阻塞线程</p>
</li>
<li>
<p>静态成员变量
开发中会定义许多<code>static</code>变量，如果有大量的静态变量定义，并有引用资源，一定要在<code>onDestroy</code>或其他地方及时释放(把变量置空即可)</p>
</li>
</ol>]]></description>
</item>
</channel>
</rss>
